package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:25 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_more_list_4_alt1
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_more_list_4_alt1 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_7;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_10;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    com.svincent.moksa.Continuation continuation;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [name(,) | Rest]
    //  --- ,
    compound_0 = factory.makeAtom((java.lang.String)",");
    //  --- name(,)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0});
    //  --- Rest
    var_2 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [name(,) | Rest]
    compound_3 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, var_2});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_3))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_4 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_4))
      return wam.Fail;
    //  *** test arg List
    //  --- List
    var_5 = factory.makeVariable((java.lang.String)"List");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_5))
      return wam.Fail;
    //  *** test arg Tail
    //  --- Tail
    var_6 = factory.makeVariable((java.lang.String)"Tail");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_6))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- Exp
    var_7 = factory.makeVariable((java.lang.String)"Exp");
    //  --- MoreListTokens
    var_8 = factory.makeVariable((java.lang.String)"MoreListTokens");
    //  --- parse_prolog_exp(Rest, Priority, Exp, MoreListTokens)
    compound_9 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_exp", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_4, var_7, var_8});
    //  --- MoreList
    var_10 = factory.makeVariable((java.lang.String)"MoreList");
    //  --- parse_prolog_more_list(MoreListTokens, Priority, MoreList, Tail)
    compound_11 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_more_list", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_8, var_4, var_10, var_6});
    //  --- [Exp | MoreList]
    compound_12 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_7, var_10});
    //  --- '='(List, [Exp | MoreList])
    compound_13 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, compound_12});
    //  --- ','(parse_prolog_more_list(MoreListTokens, Priority, MoreList, Tail), '='(List, [Exp | MoreList]))
    compound_14 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_11, compound_13});
    //  --- ','(parse_prolog_exp(Rest, Priority, Exp, MoreListTokens), ','(parse_prolog_more_list(MoreListTokens, Priority, MoreList, Tail), '='(List, [Exp | MoreList])))
    compound_15 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_9, compound_14});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_15, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_more_list/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.Variable var_9;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_11;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_17;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    //  --- ,
    compound_0 = factory.makeAtom((java.lang.String)",");
    //  --- name(,)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0});
    //  --- Rest
    var_2 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [name(,) | Rest]
    compound_3 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, var_2});
    //  --- Priority
    var_4 = factory.makeVariable((java.lang.String)"Priority");
    //  --- List
    var_5 = factory.makeVariable((java.lang.String)"List");
    //  --- Tail
    var_6 = factory.makeVariable((java.lang.String)"Tail");
    //  --- parse_prolog_more_list([name(,) | Rest], Priority, List, Tail)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_more_list", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_3, var_4, var_5, var_6});
    //  --- Exp
    var_8 = factory.makeVariable((java.lang.String)"Exp");
    //  --- MoreListTokens
    var_9 = factory.makeVariable((java.lang.String)"MoreListTokens");
    //  --- parse_prolog_exp(Rest, Priority, Exp, MoreListTokens)
    compound_10 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_exp", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_4, var_8, var_9});
    //  --- MoreList
    var_11 = factory.makeVariable((java.lang.String)"MoreList");
    //  --- parse_prolog_more_list(MoreListTokens, Priority, MoreList, Tail)
    compound_12 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_more_list", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_9, var_4, var_11, var_6});
    //  --- [Exp | MoreList]
    compound_13 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_8, var_11});
    //  --- '='(List, [Exp | MoreList])
    compound_14 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, compound_13});
    //  --- ','(parse_prolog_more_list(MoreListTokens, Priority, MoreList, Tail), '='(List, [Exp | MoreList]))
    compound_15 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_12, compound_14});
    //  --- ','(parse_prolog_exp(Rest, Priority, Exp, MoreListTokens), ','(parse_prolog_more_list(MoreListTokens, Priority, MoreList, Tail), '='(List, [Exp | MoreList])))
    compound_16 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_10, compound_15});
    //  --- ':-'(parse_prolog_more_list([name(,) | Rest], Priority, List, Tail), ','(parse_prolog_exp(Rest, Priority, Exp, MoreListTokens), ','(parse_prolog_more_list(MoreListTokens, Priority, MoreList, Tail), '='(List, [Exp | MoreList]))))
    compound_17 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, compound_16});
    return compound_17;
  }
  
}

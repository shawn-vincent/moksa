package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:19 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt4
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt4 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.WamInteger int_7;
    com.svincent.moksa.Variable var_3;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [variable(Name, Var) | Rest]
    //  --- Name
    var_0 = factory.makeVariable((java.lang.String)"Name");
    //  --- Var
    var_1 = factory.makeVariable((java.lang.String)"Var");
    //  --- variable(Name, Var)
    compound_2 = factory.makeCompoundTerm((java.lang.String)"variable", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1});
    //  --- Rest
    var_3 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [variable(Name, Var) | Rest]
    compound_4 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, var_3});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_4))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_5 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_5))
      return wam.Fail;
    //  *** test arg Term
    //  --- Term
    var_6 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_6))
      return wam.Fail;
    //  *** test arg Rest
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- 0
    int_7 = factory.makeInteger((int)0);
    //  --- '>='(Priority, 0)
    compound_8 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, int_7});
    //  --- '='(Term, Var)
    compound_9 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_6, var_1});
    //  --- ','('>='(Priority, 0), '='(Term, Var))
    compound_10 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_8, compound_9});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_10, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_term/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.WamInteger int_8;
    com.svincent.moksa.Variable var_3;
    //  --- Name
    var_0 = factory.makeVariable((java.lang.String)"Name");
    //  --- Var
    var_1 = factory.makeVariable((java.lang.String)"Var");
    //  --- variable(Name, Var)
    compound_2 = factory.makeCompoundTerm((java.lang.String)"variable", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1});
    //  --- Rest
    var_3 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [variable(Name, Var) | Rest]
    compound_4 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, var_3});
    //  --- Priority
    var_5 = factory.makeVariable((java.lang.String)"Priority");
    //  --- Term
    var_6 = factory.makeVariable((java.lang.String)"Term");
    //  --- parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_4, var_5, var_6, var_3});
    //  --- 0
    int_8 = factory.makeInteger((int)0);
    //  --- '>='(Priority, 0)
    compound_9 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, int_8});
    //  --- '='(Term, Var)
    compound_10 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_6, var_1});
    //  --- ','('>='(Priority, 0), '='(Term, Var))
    compound_11 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_9, compound_10});
    //  --- ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
    compound_12 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, compound_11});
    return compound_12;
  }
  
}

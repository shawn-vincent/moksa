package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:18 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt2
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt2 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.WamInteger int_9;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_7;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_13;
    com.svincent.moksa.Continuation continuation;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [name(-), integer(Number) | Rest]
    //  --- -
    compound_0 = factory.makeAtom((java.lang.String)"-");
    //  --- name(-)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0});
    //  --- Number
    var_2 = factory.makeVariable((java.lang.String)"Number");
    //  --- integer(Number)
    compound_3 = factory.makeCompoundTerm((java.lang.String)"integer", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2});
    //  --- Rest
    var_4 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [integer(Number) | Rest]
    compound_5 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_3, var_4});
    //  --- [name(-), integer(Number) | Rest]
    compound_6 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, compound_5});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_6))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_7 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_7))
      return wam.Fail;
    //  *** test arg Term
    //  --- Term
    var_8 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_8))
      return wam.Fail;
    //  *** test arg Rest
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_4))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- 0
    int_9 = factory.makeInteger((int)0);
    //  --- '>='(Priority, 0)
    compound_10 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_7, int_9});
    //  --- '-'(Number)
    compound_11 = factory.makeCompoundTerm((java.lang.String)"-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2});
    //  --- is(Term, '-'(Number))
    compound_12 = factory.makeCompoundTerm((java.lang.String)"is", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_8, compound_11});
    //  --- ','('>='(Priority, 0), is(Term, '-'(Number)))
    compound_13 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_10, compound_12});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_13, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_term/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_7;
    com.svincent.moksa.WamInteger int_10;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_2;
    //  --- -
    compound_0 = factory.makeAtom((java.lang.String)"-");
    //  --- name(-)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0});
    //  --- Number
    var_2 = factory.makeVariable((java.lang.String)"Number");
    //  --- integer(Number)
    compound_3 = factory.makeCompoundTerm((java.lang.String)"integer", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2});
    //  --- Rest
    var_4 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [integer(Number) | Rest]
    compound_5 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_3, var_4});
    //  --- [name(-), integer(Number) | Rest]
    compound_6 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, compound_5});
    //  --- Priority
    var_7 = factory.makeVariable((java.lang.String)"Priority");
    //  --- Term
    var_8 = factory.makeVariable((java.lang.String)"Term");
    //  --- parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest)
    compound_9 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_6, var_7, var_8, var_4});
    //  --- 0
    int_10 = factory.makeInteger((int)0);
    //  --- '>='(Priority, 0)
    compound_11 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_7, int_10});
    //  --- '-'(Number)
    compound_12 = factory.makeCompoundTerm((java.lang.String)"-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2});
    //  --- is(Term, '-'(Number))
    compound_13 = factory.makeCompoundTerm((java.lang.String)"is", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_8, compound_12});
    //  --- ','('>='(Priority, 0), is(Term, '-'(Number)))
    compound_14 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_11, compound_13});
    //  --- ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
    compound_15 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_9, compound_14});
    return compound_15;
  }
  
}

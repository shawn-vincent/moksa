package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:21 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_exp_4
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_exp_4 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_2;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [name(Name) | Rest]
    //  --- Name
    var_0 = factory.makeVariable((java.lang.String)"Name");
    //  --- name(Name)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- Rest
    var_2 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [name(Name) | Rest]
    compound_3 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, var_2});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_3))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_4 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_4))
      return wam.Fail;
    //  *** test arg Exp
    //  --- Exp
    var_5 = factory.makeVariable((java.lang.String)"Exp");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_5))
      return wam.Fail;
    //  *** test arg Rest
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_2))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- operator_no_comma(Name)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"operator_no_comma", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- '='(Exp, Name)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, var_0});
    //  --- ','(operator_no_comma(Name), '='(Exp, Name))
    compound_8 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_6, compound_7});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_8, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_exp/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_2;
    //  --- Name
    var_0 = factory.makeVariable((java.lang.String)"Name");
    //  --- name(Name)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- Rest
    var_2 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [name(Name) | Rest]
    compound_3 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, var_2});
    //  --- Priority
    var_4 = factory.makeVariable((java.lang.String)"Priority");
    //  --- Exp
    var_5 = factory.makeVariable((java.lang.String)"Exp");
    //  --- parse_prolog_exp([name(Name) | Rest], Priority, Exp, Rest)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_exp", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_3, var_4, var_5, var_2});
    //  --- operator_no_comma(Name)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"operator_no_comma", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- '='(Exp, Name)
    compound_8 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, var_0});
    //  --- ','(operator_no_comma(Name), '='(Exp, Name))
    compound_9 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, compound_8});
    //  --- ':-'(parse_prolog_exp([name(Name) | Rest], Priority, Exp, Rest), ','(operator_no_comma(Name), '='(Exp, Name)))
    compound_10 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_6, compound_9});
    return compound_10;
  }
  
}

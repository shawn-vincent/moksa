package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:16 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.prolog_term_to_tokens_4_alt1
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.prolog_term_to_tokens_4_alt1 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_0;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg end_of_file
    //  --- end_of_file
    compound_0 = factory.makeAtom((java.lang.String)"end_of_file");
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_0))
      return wam.Fail;
    //  *** test arg S
    //  --- S
    var_1 = factory.makeVariable((java.lang.String)"S");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_1))
      return wam.Fail;
    //  *** test arg []
    //  --- []
    compound_2 = factory.makeAtom((java.lang.String)"[]");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)compound_2))
      return wam.Fail;
    //  *** test arg Vars
    //  --- Vars
    var_3 = factory.makeVariable((java.lang.String)"Vars");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    continuation = wam.getContinuation();
    return continuation;
  }
  
  public java.lang.String getName ()
  {
    return "prolog_term_to_tokens/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_0;
    //  --- end_of_file
    compound_0 = factory.makeAtom((java.lang.String)"end_of_file");
    //  --- S
    var_1 = factory.makeVariable((java.lang.String)"S");
    //  --- []
    compound_2 = factory.makeAtom((java.lang.String)"[]");
    //  --- Vars
    var_3 = factory.makeVariable((java.lang.String)"Vars");
    //  --- prolog_term_to_tokens(end_of_file, S, [], Vars)
    compound_4 = factory.makeCompoundTerm((java.lang.String)"prolog_term_to_tokens", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1, compound_2, var_3});
    return compound_4;
  }
  
}

package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:17 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.prolog_term_to_tokens_4_alt2
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.prolog_term_to_tokens_4_alt2 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_11;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    com.svincent.moksa.Continuation continuation;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg variable(Name)
    //  --- Name
    var_0 = factory.makeVariable((java.lang.String)"Name");
    //  --- variable(Name)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"variable", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_1))
      return wam.Fail;
    //  *** test arg S
    //  --- S
    var_2 = factory.makeVariable((java.lang.String)"S");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_2))
      return wam.Fail;
    //  *** test arg Tokens
    //  --- Tokens
    var_3 = factory.makeVariable((java.lang.String)"Tokens");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    //  *** test arg Vars
    //  --- Vars
    var_4 = factory.makeVariable((java.lang.String)"Vars");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_4))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- VarToken
    var_5 = factory.makeVariable((java.lang.String)"VarToken");
    //  --- NewVars
    var_6 = factory.makeVariable((java.lang.String)"NewVars");
    //  --- make_unique_variable_token(Name, Vars, VarToken, NewVars)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"make_unique_variable_token", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_4, var_5, var_6});
    //  --- Rest
    var_8 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [VarToken | Rest]
    compound_9 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, var_8});
    //  --- '='(Tokens, [VarToken | Rest])
    compound_10 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_3, compound_9});
    //  --- NextToken
    var_11 = factory.makeVariable((java.lang.String)"NextToken");
    //  --- get_prolog_token(S, NextToken)
    compound_12 = factory.makeCompoundTerm((java.lang.String)"get_prolog_token", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_11});
    //  --- prolog_term_to_tokens(NextToken, S, Rest, NewVars)
    compound_13 = factory.makeCompoundTerm((java.lang.String)"prolog_term_to_tokens", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_11, var_2, var_8, var_6});
    //  --- ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars))
    compound_14 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_12, compound_13});
    //  --- ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))
    compound_15 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_10, compound_14});
    //  --- ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars))))
    compound_16 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, compound_15});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_16, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "prolog_term_to_tokens/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.Variable var_9;
    com.svincent.moksa.Variable var_7;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_12;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.CompoundTerm compound_18;
    com.svincent.moksa.CompoundTerm compound_17;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    //  --- Name
    var_0 = factory.makeVariable((java.lang.String)"Name");
    //  --- variable(Name)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"variable", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- S
    var_2 = factory.makeVariable((java.lang.String)"S");
    //  --- Tokens
    var_3 = factory.makeVariable((java.lang.String)"Tokens");
    //  --- Vars
    var_4 = factory.makeVariable((java.lang.String)"Vars");
    //  --- prolog_term_to_tokens(variable(Name), S, Tokens, Vars)
    compound_5 = factory.makeCompoundTerm((java.lang.String)"prolog_term_to_tokens", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, var_2, var_3, var_4});
    //  --- VarToken
    var_6 = factory.makeVariable((java.lang.String)"VarToken");
    //  --- NewVars
    var_7 = factory.makeVariable((java.lang.String)"NewVars");
    //  --- make_unique_variable_token(Name, Vars, VarToken, NewVars)
    compound_8 = factory.makeCompoundTerm((java.lang.String)"make_unique_variable_token", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_4, var_6, var_7});
    //  --- Rest
    var_9 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [VarToken | Rest]
    compound_10 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_6, var_9});
    //  --- '='(Tokens, [VarToken | Rest])
    compound_11 = factory.makeCompoundTerm((java.lang.String)"=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_3, compound_10});
    //  --- NextToken
    var_12 = factory.makeVariable((java.lang.String)"NextToken");
    //  --- get_prolog_token(S, NextToken)
    compound_13 = factory.makeCompoundTerm((java.lang.String)"get_prolog_token", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_12});
    //  --- prolog_term_to_tokens(NextToken, S, Rest, NewVars)
    compound_14 = factory.makeCompoundTerm((java.lang.String)"prolog_term_to_tokens", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_12, var_2, var_9, var_7});
    //  --- ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars))
    compound_15 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_13, compound_14});
    //  --- ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))
    compound_16 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_11, compound_15});
    //  --- ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars))))
    compound_17 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_8, compound_16});
    //  --- ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
    compound_18 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_5, compound_17});
    return compound_18;
  }
  
}

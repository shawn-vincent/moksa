package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:22 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt13
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt13 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.CompoundTerm compound_29;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_28;
    com.svincent.moksa.CompoundTerm compound_27;
    com.svincent.moksa.CompoundTerm compound_26;
    com.svincent.moksa.CompoundTerm compound_25;
    com.svincent.moksa.CompoundTerm compound_24;
    com.svincent.moksa.CompoundTerm compound_23;
    com.svincent.moksa.CompoundTerm compound_22;
    com.svincent.moksa.CompoundTerm compound_21;
    com.svincent.moksa.Variable var_20;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.CompoundTerm compound_19;
    com.svincent.moksa.CompoundTerm compound_18;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.CompoundTerm compound_13;
    com.svincent.moksa.Variable var_17;
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.Variable var_15;
    com.svincent.moksa.Variable var_14;
    com.svincent.moksa.Variable var_11;
    com.svincent.moksa.Variable var_10;
    com.svincent.moksa.Variable var_7;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_32;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_31;
    com.svincent.moksa.CompoundTerm compound_30;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg Tokens
    //  --- Tokens
    var_0 = factory.makeVariable((java.lang.String)"Tokens");
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)var_0))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_1 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_1))
      return wam.Fail;
    //  *** test arg Term
    //  --- Term
    var_2 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_2))
      return wam.Fail;
    //  *** test arg Rest
    //  --- Rest
    var_3 = factory.makeVariable((java.lang.String)"Rest");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- ATokens
    var_4 = factory.makeVariable((java.lang.String)"ATokens");
    //  --- Op
    var_5 = factory.makeVariable((java.lang.String)"Op");
    //  --- name(Op)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5});
    //  --- BTokens
    var_7 = factory.makeVariable((java.lang.String)"BTokens");
    //  --- [name(Op) | BTokens]
    compound_8 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_6, var_7});
    //  --- append(ATokens, [name(Op) | BTokens], Tokens)
    compound_9 = factory.makeCompoundTerm((java.lang.String)"append", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_4, compound_8, var_0});
    //  --- OPri
    var_10 = factory.makeVariable((java.lang.String)"OPri");
    //  --- Op_Specifier
    var_11 = factory.makeVariable((java.lang.String)"Op_Specifier");
    //  --- current_op(OPri, Op_Specifier, Op)
    compound_12 = factory.makeCompoundTerm((java.lang.String)"current_op", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_10, var_11, var_5});
    //  --- '>='(Priority, OPri)
    compound_13 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, var_10});
    //  --- APri
    var_14 = factory.makeVariable((java.lang.String)"APri");
    //  --- BPri
    var_15 = factory.makeVariable((java.lang.String)"BPri");
    //  --- calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri)
    compound_16 = factory.makeCompoundTerm((java.lang.String)"calculate_prolog_infix_subpriority", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_11, var_10, var_14, var_15});
    //  --- A
    var_17 = factory.makeVariable((java.lang.String)"A");
    //  --- []
    compound_18 = factory.makeAtom((java.lang.String)"[]");
    //  --- parse_prolog_term(ATokens, APri, A, [])
    compound_19 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_4, var_14, var_17, compound_18});
    //  --- B
    var_20 = factory.makeVariable((java.lang.String)"B");
    //  --- parse_prolog_term(BTokens, BPri, B, Rest)
    compound_21 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_7, var_15, var_20, var_3});
    //  --- []
    compound_22 = factory.makeAtom((java.lang.String)"[]");
    //  --- [B]
    compound_23 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_20, compound_22});
    //  --- [A, B]
    compound_24 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_17, compound_23});
    //  --- [Op, A, B]
    compound_25 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, compound_24});
    //  --- '=..'(Term, [Op, A, B])
    compound_26 = factory.makeCompoundTerm((java.lang.String)"=..", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, compound_25});
    //  --- ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))
    compound_27 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_21, compound_26});
    //  --- ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))
    compound_28 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_19, compound_27});
    //  --- ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))))
    compound_29 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_16, compound_28});
    //  --- ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))))
    compound_30 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_13, compound_29});
    //  --- ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))))))
    compound_31 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_12, compound_30});
    //  --- ','(append(ATokens, [name(Op) | BTokens], Tokens), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))))))
    compound_32 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_9, compound_31});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_32, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_term/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.CompoundTerm compound_29;
    com.svincent.moksa.CompoundTerm compound_28;
    com.svincent.moksa.CompoundTerm compound_27;
    com.svincent.moksa.CompoundTerm compound_26;
    com.svincent.moksa.CompoundTerm compound_25;
    com.svincent.moksa.CompoundTerm compound_24;
    com.svincent.moksa.CompoundTerm compound_23;
    com.svincent.moksa.CompoundTerm compound_22;
    com.svincent.moksa.CompoundTerm compound_20;
    com.svincent.moksa.Variable var_21;
    com.svincent.moksa.CompoundTerm compound_19;
    com.svincent.moksa.CompoundTerm compound_17;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    com.svincent.moksa.Variable var_18;
    com.svincent.moksa.Variable var_16;
    com.svincent.moksa.Variable var_15;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.Variable var_12;
    com.svincent.moksa.Variable var_11;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_34;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_33;
    com.svincent.moksa.CompoundTerm compound_32;
    com.svincent.moksa.CompoundTerm compound_31;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.CompoundTerm compound_30;
    //  --- Tokens
    var_0 = factory.makeVariable((java.lang.String)"Tokens");
    //  --- Priority
    var_1 = factory.makeVariable((java.lang.String)"Priority");
    //  --- Term
    var_2 = factory.makeVariable((java.lang.String)"Term");
    //  --- Rest
    var_3 = factory.makeVariable((java.lang.String)"Rest");
    //  --- parse_prolog_term(Tokens, Priority, Term, Rest)
    compound_4 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1, var_2, var_3});
    //  --- ATokens
    var_5 = factory.makeVariable((java.lang.String)"ATokens");
    //  --- Op
    var_6 = factory.makeVariable((java.lang.String)"Op");
    //  --- name(Op)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_6});
    //  --- BTokens
    var_8 = factory.makeVariable((java.lang.String)"BTokens");
    //  --- [name(Op) | BTokens]
    compound_9 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, var_8});
    //  --- append(ATokens, [name(Op) | BTokens], Tokens)
    compound_10 = factory.makeCompoundTerm((java.lang.String)"append", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, compound_9, var_0});
    //  --- OPri
    var_11 = factory.makeVariable((java.lang.String)"OPri");
    //  --- Op_Specifier
    var_12 = factory.makeVariable((java.lang.String)"Op_Specifier");
    //  --- current_op(OPri, Op_Specifier, Op)
    compound_13 = factory.makeCompoundTerm((java.lang.String)"current_op", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_11, var_12, var_6});
    //  --- '>='(Priority, OPri)
    compound_14 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, var_11});
    //  --- APri
    var_15 = factory.makeVariable((java.lang.String)"APri");
    //  --- BPri
    var_16 = factory.makeVariable((java.lang.String)"BPri");
    //  --- calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri)
    compound_17 = factory.makeCompoundTerm((java.lang.String)"calculate_prolog_infix_subpriority", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_12, var_11, var_15, var_16});
    //  --- A
    var_18 = factory.makeVariable((java.lang.String)"A");
    //  --- []
    compound_19 = factory.makeAtom((java.lang.String)"[]");
    //  --- parse_prolog_term(ATokens, APri, A, [])
    compound_20 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, var_15, var_18, compound_19});
    //  --- B
    var_21 = factory.makeVariable((java.lang.String)"B");
    //  --- parse_prolog_term(BTokens, BPri, B, Rest)
    compound_22 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_8, var_16, var_21, var_3});
    //  --- []
    compound_23 = factory.makeAtom((java.lang.String)"[]");
    //  --- [B]
    compound_24 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_21, compound_23});
    //  --- [A, B]
    compound_25 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_18, compound_24});
    //  --- [Op, A, B]
    compound_26 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_6, compound_25});
    //  --- '=..'(Term, [Op, A, B])
    compound_27 = factory.makeCompoundTerm((java.lang.String)"=..", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, compound_26});
    //  --- ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))
    compound_28 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_22, compound_27});
    //  --- ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))
    compound_29 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_20, compound_28});
    //  --- ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))))
    compound_30 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_17, compound_29});
    //  --- ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))))
    compound_31 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_14, compound_30});
    //  --- ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))))))
    compound_32 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_13, compound_31});
    //  --- ','(append(ATokens, [name(Op) | BTokens], Tokens), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))))))
    compound_33 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_10, compound_32});
    //  --- ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(Op) | BTokens], Tokens), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))))))))
    compound_34 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_4, compound_33});
    return compound_34;
  }
  
}

package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:21 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt11
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt11 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_22;
    com.svincent.moksa.CompoundTerm compound_21;
    com.svincent.moksa.CompoundTerm compound_20;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_13;
    com.svincent.moksa.Variable var_7;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_10;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_19;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_18;
    com.svincent.moksa.CompoundTerm compound_17;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.Continuation continuation;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [name(Op) | ATokens]
    //  --- Op
    var_0 = factory.makeVariable((java.lang.String)"Op");
    //  --- name(Op)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- ATokens
    var_2 = factory.makeVariable((java.lang.String)"ATokens");
    //  --- [name(Op) | ATokens]
    compound_3 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, var_2});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_3))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_4 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_4))
      return wam.Fail;
    //  *** test arg Term
    //  --- Term
    var_5 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_5))
      return wam.Fail;
    //  *** test arg Rest
    //  --- Rest
    var_6 = factory.makeVariable((java.lang.String)"Rest");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_6))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- OPri
    var_7 = factory.makeVariable((java.lang.String)"OPri");
    //  --- Op_Specifier
    var_8 = factory.makeVariable((java.lang.String)"Op_Specifier");
    //  --- current_op(OPri, Op_Specifier, Op)
    compound_9 = factory.makeCompoundTerm((java.lang.String)"current_op", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_7, var_8, var_0});
    //  --- APri
    var_10 = factory.makeVariable((java.lang.String)"APri");
    //  --- calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri)
    compound_11 = factory.makeCompoundTerm((java.lang.String)"calculate_prolog_prefix_subpriority", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_8, var_7, var_10});
    //  --- '>='(Priority, OPri)
    compound_12 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_4, var_7});
    //  --- A
    var_13 = factory.makeVariable((java.lang.String)"A");
    //  --- parse_prolog_term(ATokens, APri, A, Rest)
    compound_14 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_10, var_13, var_6});
    //  --- []
    compound_15 = factory.makeAtom((java.lang.String)"[]");
    //  --- [A]
    compound_16 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_13, compound_15});
    //  --- [Op, A]
    compound_17 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, compound_16});
    //  --- '=..'(Term, [Op, A])
    compound_18 = factory.makeCompoundTerm((java.lang.String)"=..", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, compound_17});
    //  --- ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))
    compound_19 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_14, compound_18});
    //  --- ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A])))
    compound_20 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_12, compound_19});
    //  --- ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))))
    compound_21 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_11, compound_20});
    //  --- ','(current_op(OPri, Op_Specifier, Op), ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A])))))
    compound_22 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_9, compound_21});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_22, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_term/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.CompoundTerm compound_24;
    com.svincent.moksa.CompoundTerm compound_23;
    com.svincent.moksa.CompoundTerm compound_22;
    com.svincent.moksa.CompoundTerm compound_21;
    com.svincent.moksa.CompoundTerm compound_20;
    com.svincent.moksa.Variable var_9;
    com.svincent.moksa.Variable var_8;
    com.svincent.moksa.Variable var_14;
    com.svincent.moksa.Variable var_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_11;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_19;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_18;
    com.svincent.moksa.CompoundTerm compound_17;
    com.svincent.moksa.CompoundTerm compound_1;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_13;
    //  --- Op
    var_0 = factory.makeVariable((java.lang.String)"Op");
    //  --- name(Op)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"name", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- ATokens
    var_2 = factory.makeVariable((java.lang.String)"ATokens");
    //  --- [name(Op) | ATokens]
    compound_3 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, var_2});
    //  --- Priority
    var_4 = factory.makeVariable((java.lang.String)"Priority");
    //  --- Term
    var_5 = factory.makeVariable((java.lang.String)"Term");
    //  --- Rest
    var_6 = factory.makeVariable((java.lang.String)"Rest");
    //  --- parse_prolog_term([name(Op) | ATokens], Priority, Term, Rest)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_3, var_4, var_5, var_6});
    //  --- OPri
    var_8 = factory.makeVariable((java.lang.String)"OPri");
    //  --- Op_Specifier
    var_9 = factory.makeVariable((java.lang.String)"Op_Specifier");
    //  --- current_op(OPri, Op_Specifier, Op)
    compound_10 = factory.makeCompoundTerm((java.lang.String)"current_op", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_8, var_9, var_0});
    //  --- APri
    var_11 = factory.makeVariable((java.lang.String)"APri");
    //  --- calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri)
    compound_12 = factory.makeCompoundTerm((java.lang.String)"calculate_prolog_prefix_subpriority", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_9, var_8, var_11});
    //  --- '>='(Priority, OPri)
    compound_13 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_4, var_8});
    //  --- A
    var_14 = factory.makeVariable((java.lang.String)"A");
    //  --- parse_prolog_term(ATokens, APri, A, Rest)
    compound_15 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_11, var_14, var_6});
    //  --- []
    compound_16 = factory.makeAtom((java.lang.String)"[]");
    //  --- [A]
    compound_17 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_14, compound_16});
    //  --- [Op, A]
    compound_18 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, compound_17});
    //  --- '=..'(Term, [Op, A])
    compound_19 = factory.makeCompoundTerm((java.lang.String)"=..", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_5, compound_18});
    //  --- ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))
    compound_20 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_15, compound_19});
    //  --- ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A])))
    compound_21 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_13, compound_20});
    //  --- ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))))
    compound_22 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_12, compound_21});
    //  --- ','(current_op(OPri, Op_Specifier, Op), ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A])))))
    compound_23 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_10, compound_22});
    //  --- ':-'(parse_prolog_term([name(Op) | ATokens], Priority, Term, Rest), ','(current_op(OPri, Op_Specifier, Op), ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))))))
    compound_24 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, compound_23});
    return compound_24;
  }
  
}

package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:16 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.read_term_2
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.read_term_2 ()
  {
  }
  
  public int getArity ()
  {
    return 2;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_2;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg Stream
    //  --- Stream
    var_0 = factory.makeVariable((java.lang.String)"Stream");
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)var_0))
      return wam.Fail;
    //  *** test arg Term
    //  --- Term
    var_1 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_1))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- Tokens
    var_2 = factory.makeVariable((java.lang.String)"Tokens");
    //  --- _
    var_3 = factory.makeVariable((java.lang.String)"_");
    //  --- tokenize_prolog_term(Stream, Tokens, _)
    compound_4 = factory.makeCompoundTerm((java.lang.String)"tokenize_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_2, var_3});
    //  --- parse_prolog_term(Tokens, Term)
    compound_5 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_1});
    //  --- ','(tokenize_prolog_term(Stream, Tokens, _), parse_prolog_term(Tokens, Term))
    compound_6 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_4, compound_5});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_6, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "read_term/2";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    //  --- Stream
    var_0 = factory.makeVariable((java.lang.String)"Stream");
    //  --- Term
    var_1 = factory.makeVariable((java.lang.String)"Term");
    //  --- read_term(Stream, Term)
    compound_2 = factory.makeCompoundTerm((java.lang.String)"read_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1});
    //  --- Tokens
    var_3 = factory.makeVariable((java.lang.String)"Tokens");
    //  --- _
    var_4 = factory.makeVariable((java.lang.String)"_");
    //  --- tokenize_prolog_term(Stream, Tokens, _)
    compound_5 = factory.makeCompoundTerm((java.lang.String)"tokenize_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_3, var_4});
    //  --- parse_prolog_term(Tokens, Term)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_3, var_1});
    //  --- ','(tokenize_prolog_term(Stream, Tokens, _), parse_prolog_term(Tokens, Term))
    compound_7 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_5, compound_6});
    //  --- ':-'(read_term(Stream, Term), ','(tokenize_prolog_term(Stream, Tokens, _), parse_prolog_term(Tokens, Term)))
    compound_8 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, compound_7});
    return compound_8;
  }
  
}

package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:18 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_2
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_2 ()
  {
  }
  
  public int getArity ()
  {
    return 2;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_0;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [end_of_file | Rest]
    //  --- end_of_file
    compound_0 = factory.makeAtom((java.lang.String)"end_of_file");
    //  --- Rest
    var_1 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [end_of_file | Rest]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_2))
      return wam.Fail;
    //  *** test arg end_of_file
    //  --- end_of_file
    compound_3 = factory.makeAtom((java.lang.String)"end_of_file");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)compound_3))
      return wam.Fail;
    continuation = wam.getContinuation();
    return continuation;
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_term/2";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_0;
    //  --- end_of_file
    compound_0 = factory.makeAtom((java.lang.String)"end_of_file");
    //  --- Rest
    var_1 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [end_of_file | Rest]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1});
    //  --- end_of_file
    compound_3 = factory.makeAtom((java.lang.String)"end_of_file");
    //  --- parse_prolog_term([end_of_file | Rest], end_of_file)
    compound_4 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, compound_3});
    return compound_4;
  }
  
}

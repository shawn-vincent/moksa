package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:22 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.calculate_prolog_infix_subpriority_4_alt1
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.calculate_prolog_infix_subpriority_4_alt1 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.WamInteger int_5;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_2;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg yfx
    //  --- yfx
    compound_0 = factory.makeAtom((java.lang.String)"yfx");
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_0))
      return wam.Fail;
    //  *** test arg P
    //  --- P
    var_1 = factory.makeVariable((java.lang.String)"P");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_1))
      return wam.Fail;
    //  *** test arg AP
    //  --- AP
    var_2 = factory.makeVariable((java.lang.String)"AP");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_2))
      return wam.Fail;
    //  *** test arg BP
    //  --- BP
    var_3 = factory.makeVariable((java.lang.String)"BP");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- is(AP, P)
    compound_4 = factory.makeCompoundTerm((java.lang.String)"is", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_1});
    //  --- 1
    int_5 = factory.makeInteger((int)1);
    //  --- '-'(P, 1)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, int_5});
    //  --- is(BP, '-'(P, 1))
    compound_7 = factory.makeCompoundTerm((java.lang.String)"is", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_3, compound_6});
    //  --- ','(is(AP, P), is(BP, '-'(P, 1)))
    compound_8 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_4, compound_7});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_8, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "calculate_prolog_infix_subpriority/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.WamInteger int_6;
    com.svincent.moksa.Variable var_2;
    //  --- yfx
    compound_0 = factory.makeAtom((java.lang.String)"yfx");
    //  --- P
    var_1 = factory.makeVariable((java.lang.String)"P");
    //  --- AP
    var_2 = factory.makeVariable((java.lang.String)"AP");
    //  --- BP
    var_3 = factory.makeVariable((java.lang.String)"BP");
    //  --- calculate_prolog_infix_subpriority(yfx, P, AP, BP)
    compound_4 = factory.makeCompoundTerm((java.lang.String)"calculate_prolog_infix_subpriority", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1, var_2, var_3});
    //  --- is(AP, P)
    compound_5 = factory.makeCompoundTerm((java.lang.String)"is", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_1});
    //  --- 1
    int_6 = factory.makeInteger((int)1);
    //  --- '-'(P, 1)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, int_6});
    //  --- is(BP, '-'(P, 1))
    compound_8 = factory.makeCompoundTerm((java.lang.String)"is", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_3, compound_7});
    //  --- ','(is(AP, P), is(BP, '-'(P, 1)))
    compound_9 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_5, compound_8});
    //  --- ':-'(calculate_prolog_infix_subpriority(yfx, P, AP, BP), ','(is(AP, P), is(BP, '-'(P, 1))))
    compound_10 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_4, compound_9});
    return compound_10;
  }
  
}

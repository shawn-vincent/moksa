package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:20 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt10
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt10 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.WamInteger int_6;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [open | Rest]
    //  --- open
    compound_0 = factory.makeAtom((java.lang.String)"open");
    //  --- Rest
    var_1 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [open | Rest]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_2))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_3 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    //  *** test arg Term
    //  --- Term
    var_4 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_4))
      return wam.Fail;
    //  *** test arg Tail
    //  --- Tail
    var_5 = factory.makeVariable((java.lang.String)"Tail");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_5))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- 1201
    int_6 = factory.makeInteger((int)1201);
    //  --- close
    compound_7 = factory.makeAtom((java.lang.String)"close");
    //  --- [close | Tail]
    compound_8 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, var_5});
    //  --- parse_prolog_term(Rest, 1201, Term, [close | Tail])
    compound_9 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, int_6, var_4, compound_8});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_9, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_term/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_9;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.WamInteger int_7;
    com.svincent.moksa.Variable var_3;
    //  --- open
    compound_0 = factory.makeAtom((java.lang.String)"open");
    //  --- Rest
    var_1 = factory.makeVariable((java.lang.String)"Rest");
    //  --- [open | Rest]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1});
    //  --- Priority
    var_3 = factory.makeVariable((java.lang.String)"Priority");
    //  --- Term
    var_4 = factory.makeVariable((java.lang.String)"Term");
    //  --- Tail
    var_5 = factory.makeVariable((java.lang.String)"Tail");
    //  --- parse_prolog_term([open | Rest], Priority, Term, Tail)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, var_3, var_4, var_5});
    //  --- 1201
    int_7 = factory.makeInteger((int)1201);
    //  --- close
    compound_8 = factory.makeAtom((java.lang.String)"close");
    //  --- [close | Tail]
    compound_9 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_8, var_5});
    //  --- parse_prolog_term(Rest, 1201, Term, [close | Tail])
    compound_10 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, int_7, var_4, compound_9});
    //  --- ':-'(parse_prolog_term([open | Rest], Priority, Term, Tail), parse_prolog_term(Rest, 1201, Term, [close | Tail]))
    compound_11 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_6, compound_10});
    return compound_11;
  }
  
}

package com.svincent.moksa.prolog.parser_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:20 AM EST
 */
public class com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt9
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.parser_prolog.parse_prolog_term_4_alt9 ()
  {
  }
  
  public int getArity ()
  {
    return 4;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.CompoundTerm compound_10;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.Variable var_9;
    com.svincent.moksa.WamInteger int_8;
    com.svincent.moksa.WamInteger int_6;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_19;
    com.svincent.moksa.CompoundTerm compound_18;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_17;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    com.svincent.moksa.Continuation continuation;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [open_curly | BodyTokens]
    //  --- open_curly
    compound_0 = factory.makeAtom((java.lang.String)"open_curly");
    //  --- BodyTokens
    var_1 = factory.makeVariable((java.lang.String)"BodyTokens");
    //  --- [open_curly | BodyTokens]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_2))
      return wam.Fail;
    //  *** test arg Priority
    //  --- Priority
    var_3 = factory.makeVariable((java.lang.String)"Priority");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    //  *** test arg Term
    //  --- Term
    var_4 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)var_4))
      return wam.Fail;
    //  *** test arg Rest
    //  --- Rest
    var_5 = factory.makeVariable((java.lang.String)"Rest");
    if (wam.badparm((int)3, (com.svincent.moksa.PrologTerm)var_5))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- 0
    int_6 = factory.makeInteger((int)0);
    //  --- '>='(Priority, 0)
    compound_7 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_3, int_6});
    //  --- 1201
    int_8 = factory.makeInteger((int)1201);
    //  --- Subterm
    var_9 = factory.makeVariable((java.lang.String)"Subterm");
    //  --- close_curly
    compound_10 = factory.makeAtom((java.lang.String)"close_curly");
    //  --- [close_curly | Rest]
    compound_11 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_10, var_5});
    //  --- parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest])
    compound_12 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, int_8, var_9, compound_11});
    //  --- {}
    compound_13 = factory.makeAtom((java.lang.String)"{}");
    //  --- []
    compound_14 = factory.makeAtom((java.lang.String)"[]");
    //  --- [Subterm]
    compound_15 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_9, compound_14});
    //  --- [{}, Subterm]
    compound_16 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_13, compound_15});
    //  --- '=..'(Term, [{}, Subterm])
    compound_17 = factory.makeCompoundTerm((java.lang.String)"=..", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_4, compound_16});
    //  --- ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm]))
    compound_18 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_12, compound_17});
    //  --- ','('>='(Priority, 0), ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm])))
    compound_19 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_7, compound_18});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_19, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "parse_prolog_term/4";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.CompoundTerm compound_12;
    com.svincent.moksa.CompoundTerm compound_11;
    com.svincent.moksa.CompoundTerm compound_21;
    com.svincent.moksa.CompoundTerm compound_20;
    com.svincent.moksa.WamInteger int_9;
    com.svincent.moksa.WamInteger int_7;
    com.svincent.moksa.Variable var_5;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_10;
    com.svincent.moksa.Variable var_3;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_19;
    com.svincent.moksa.CompoundTerm compound_18;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.CompoundTerm compound_17;
    com.svincent.moksa.CompoundTerm compound_16;
    com.svincent.moksa.CompoundTerm compound_0;
    com.svincent.moksa.CompoundTerm compound_15;
    com.svincent.moksa.CompoundTerm compound_14;
    com.svincent.moksa.CompoundTerm compound_13;
    //  --- open_curly
    compound_0 = factory.makeAtom((java.lang.String)"open_curly");
    //  --- BodyTokens
    var_1 = factory.makeVariable((java.lang.String)"BodyTokens");
    //  --- [open_curly | BodyTokens]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_0, var_1});
    //  --- Priority
    var_3 = factory.makeVariable((java.lang.String)"Priority");
    //  --- Term
    var_4 = factory.makeVariable((java.lang.String)"Term");
    //  --- Rest
    var_5 = factory.makeVariable((java.lang.String)"Rest");
    //  --- parse_prolog_term([open_curly | BodyTokens], Priority, Term, Rest)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, var_3, var_4, var_5});
    //  --- 0
    int_7 = factory.makeInteger((int)0);
    //  --- '>='(Priority, 0)
    compound_8 = factory.makeCompoundTerm((java.lang.String)">=", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_3, int_7});
    //  --- 1201
    int_9 = factory.makeInteger((int)1201);
    //  --- Subterm
    var_10 = factory.makeVariable((java.lang.String)"Subterm");
    //  --- close_curly
    compound_11 = factory.makeAtom((java.lang.String)"close_curly");
    //  --- [close_curly | Rest]
    compound_12 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_11, var_5});
    //  --- parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest])
    compound_13 = factory.makeCompoundTerm((java.lang.String)"parse_prolog_term", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, int_9, var_10, compound_12});
    //  --- {}
    compound_14 = factory.makeAtom((java.lang.String)"{}");
    //  --- []
    compound_15 = factory.makeAtom((java.lang.String)"[]");
    //  --- [Subterm]
    compound_16 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_10, compound_15});
    //  --- [{}, Subterm]
    compound_17 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_14, compound_16});
    //  --- '=..'(Term, [{}, Subterm])
    compound_18 = factory.makeCompoundTerm((java.lang.String)"=..", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_4, compound_17});
    //  --- ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm]))
    compound_19 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_13, compound_18});
    //  --- ','('>='(Priority, 0), ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm])))
    compound_20 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_8, compound_19});
    //  --- ':-'(parse_prolog_term([open_curly | BodyTokens], Priority, Term, Rest), ','('>='(Priority, 0), ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm]))))
    compound_21 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_6, compound_20});
    return compound_21;
  }
  
}

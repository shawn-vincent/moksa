package com.svincent.moksa.prolog.system_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:00 AM EST
 */
public class com.svincent.moksa.prolog.system_prolog.memberOf_2
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.system_prolog.memberOf_2 ()
  {
  }
  
  public int getArity ()
  {
    return 2;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.CompoundTerm compound_2;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg X
    //  --- X
    var_0 = factory.makeVariable((java.lang.String)"X");
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)var_0))
      return wam.Fail;
    //  *** test arg [X | _]
    //  --- _
    var_1 = factory.makeVariable((java.lang.String)"_");
    //  --- [X | _]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1});
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)compound_2))
      return wam.Fail;
    continuation = wam.getContinuation();
    return continuation;
  }
  
  public java.lang.String getName ()
  {
    return "memberOf/2";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_2;
    //  --- X
    var_0 = factory.makeVariable((java.lang.String)"X");
    //  --- _
    var_1 = factory.makeVariable((java.lang.String)"_");
    //  --- [X | _]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1});
    //  --- memberOf(X, [X | _])
    compound_3 = factory.makeCompoundTerm((java.lang.String)"memberOf", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, compound_2});
    return compound_3;
  }
  
}

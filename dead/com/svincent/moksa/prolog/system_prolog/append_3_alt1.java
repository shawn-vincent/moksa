package com.svincent.moksa.prolog.system_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:00 AM EST
 */
public class com.svincent.moksa.prolog.system_prolog.append_3_alt1
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.system_prolog.append_3_alt1 ()
  {
  }
  
  public int getArity ()
  {
    return 3;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.PrologEngine engine;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg [A | L1]
    //  --- A
    var_0 = factory.makeVariable((java.lang.String)"A");
    //  --- L1
    var_1 = factory.makeVariable((java.lang.String)"L1");
    //  --- [A | L1]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1});
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)compound_2))
      return wam.Fail;
    //  *** test arg L2
    //  --- L2
    var_3 = factory.makeVariable((java.lang.String)"L2");
    if (wam.badparm((int)1, (com.svincent.moksa.PrologTerm)var_3))
      return wam.Fail;
    //  *** test arg [A | L3]
    //  --- L3
    var_4 = factory.makeVariable((java.lang.String)"L3");
    //  --- [A | L3]
    compound_5 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_4});
    if (wam.badparm((int)2, (com.svincent.moksa.PrologTerm)compound_5))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- append(L1, L2, L3)
    compound_6 = factory.makeCompoundTerm((java.lang.String)"append", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, var_3, var_4});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_6, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "append/3";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_8;
    com.svincent.moksa.CompoundTerm compound_7;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.Variable var_4;
    com.svincent.moksa.Variable var_3;
    //  --- A
    var_0 = factory.makeVariable((java.lang.String)"A");
    //  --- L1
    var_1 = factory.makeVariable((java.lang.String)"L1");
    //  --- [A | L1]
    compound_2 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_1});
    //  --- L2
    var_3 = factory.makeVariable((java.lang.String)"L2");
    //  --- L3
    var_4 = factory.makeVariable((java.lang.String)"L3");
    //  --- [A | L3]
    compound_5 = factory.makeCompoundTerm((java.lang.String)".", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0, var_4});
    //  --- append([A | L1], L2, [A | L3])
    compound_6 = factory.makeCompoundTerm((java.lang.String)"append", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, var_3, compound_5});
    //  --- append(L1, L2, L3)
    compound_7 = factory.makeCompoundTerm((java.lang.String)"append", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, var_3, var_4});
    //  --- ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
    compound_8 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_6, compound_7});
    return compound_8;
  }
  
}

package com.svincent.moksa.prolog.system_prolog;

/*
 * This file was automatically generated by Smalljava.
 * 
 * Smalljava Vnull-null
 * Copyright (C) 1999 Shawn Vincent
 * http://www.svincent.com/moksa/
 * Smalljava is released under the GNU general public license
 * See http://www.gnu.org/copyleft/gpl.html for details.
 * 
 * File generated: Thursday, December 2, 1999 8:07:00 AM EST
 */
public class com.svincent.moksa.prolog.system_prolog.write_1
  extends com.svincent.moksa.CompiledRule
{
  public com.svincent.moksa.prolog.system_prolog.write_1 ()
  {
  }
  
  public int getArity ()
  {
    return 1;
  }
  
  public com.svincent.moksa.Continuation invokeRule (com.svincent.moksa.Wam wam)
    throws com.svincent.moksa.PrologException
  {
    com.svincent.moksa.Variable var_1;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.Continuation continuation;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.PrologFactory factory;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_2;
    com.svincent.moksa.PrologEngine engine;
    engine = wam.getEngine();
    factory = engine.getFactory();
    //  *** test arg Term
    //  --- Term
    var_0 = factory.makeVariable((java.lang.String)"Term");
    if (wam.badparm((int)0, (com.svincent.moksa.PrologTerm)var_0))
      return wam.Fail;
    continuation = wam.getContinuation();
    //  --- S
    var_1 = factory.makeVariable((java.lang.String)"S");
    //  --- current_output(S)
    compound_2 = factory.makeCompoundTerm((java.lang.String)"current_output", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1});
    //  --- write(S, Term)
    compound_3 = factory.makeCompoundTerm((java.lang.String)"write", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_1, var_0});
    //  --- ','(current_output(S), write(S, Term))
    compound_4 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_2, compound_3});
    return com.svincent.moksa.Continuation.make((com.svincent.moksa.PrologEngine)engine, (com.svincent.moksa.PrologTerm)compound_4, (com.svincent.moksa.Continuation)continuation);
  }
  
  public java.lang.String getName ()
  {
    return "write/1";
  }
  
  public com.svincent.moksa.PrologTerm makeTerm (com.svincent.moksa.PrologFactory factory)
  {
    com.svincent.moksa.Variable var_2;
    com.svincent.moksa.CompoundTerm compound_6;
    com.svincent.moksa.Variable var_0;
    com.svincent.moksa.CompoundTerm compound_5;
    com.svincent.moksa.CompoundTerm compound_4;
    com.svincent.moksa.CompoundTerm compound_3;
    com.svincent.moksa.CompoundTerm compound_1;
    //  --- Term
    var_0 = factory.makeVariable((java.lang.String)"Term");
    //  --- write(Term)
    compound_1 = factory.makeCompoundTerm((java.lang.String)"write", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_0});
    //  --- S
    var_2 = factory.makeVariable((java.lang.String)"S");
    //  --- current_output(S)
    compound_3 = factory.makeCompoundTerm((java.lang.String)"current_output", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2});
    //  --- write(S, Term)
    compound_4 = factory.makeCompoundTerm((java.lang.String)"write", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {var_2, var_0});
    //  --- ','(current_output(S), write(S, Term))
    compound_5 = factory.makeCompoundTerm((java.lang.String)",", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_3, compound_4});
    //  --- ':-'(write(Term), ','(current_output(S), write(S, Term)))
    compound_6 = factory.makeCompoundTerm((java.lang.String)":-", (com.svincent.moksa.PrologTerm[])new com.svincent.moksa.PrologTerm[] {compound_1, compound_5});
    return compound_6;
  }
  
}

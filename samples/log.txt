Loading precompiled package system.prolog
Loading precompiled package parser.prolog
Dynamically loading package helloWorld.prolog
Saved continuation for choicepoint: NONE
 -> Invoking rule read_term/2
     Continuation: com.svincent.moksa.Continuation@337d0f
     Rule Def: ':-'(read_term(Stream, Term), ','(tokenize_prolog_term(Stream, Tokens, _), parse_prolog_term(Tokens, Term)))
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == Retval
         continuation == NONE
Returning continuation for rule read_term/2 (com.svincent.moksa.Continuation@337d0f)
 -> Invoking rule tokenize_prolog_term/3
     Continuation: com.svincent.moksa.Continuation@24bbbf
     Rule Def: ':-'(tokenize_prolog_term(S, Tokens, Vars), ','(get_prolog_token(S, Next), prolog_term_to_tokens(Next, S, Tokens, [])))
     3 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == Tokens
         register[2] == _
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule tokenize_prolog_term/3 (com.svincent.moksa.Continuation@24bbbf)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@37c71
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == Next
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [Next, S, Tokens, []], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@5f073d
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@37c71)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@5f073d
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == name(:-)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@a0d5d
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == name(:-)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@73831b
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == name(:-)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@2470b8
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == name(:-)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@2470b8)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@64457d
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@e2b22
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@64457d)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@e2b22
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == name(write)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@31c5fa
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == name(write)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@3caecd
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == name(write)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@784386
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == name(write)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@784386)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@194a4e
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@5d56d5
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@194a4e)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@5d56d5
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == open
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@6fd552
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == open
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@1dfbff
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == open
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@b4b2f
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == open
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@b4b2f)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@750159
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@2bab88
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@750159)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@2bab88
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == name(Hello, world!)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@a7efd
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == name(Hello, world!)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@171afc
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == name(Hello, world!)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@6cd7d5
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == name(Hello, world!)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@6cd7d5)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@4dedfd
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@439a2d
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@4dedfd)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@439a2d
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == close
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@3f2d5e
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == close
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@3bad12
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == close
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@5f8ff1
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == close
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@5f8ff1)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@632c2d
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@697676
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@632c2d)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@697676
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == name(,)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@60420f
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == name(,)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@1106c7
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == name(,)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@540408
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == name(,)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@540408)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@54c61c
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@1a626f
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@54c61c)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@1a626f
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == name(nl)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@34a1fc
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == name(nl)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@76c74b
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == name(nl)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@16471f
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == name(nl)
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@16471f)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@175b59
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f)@6e3914
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@175b59)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@6e3914
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == end
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@27734f
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@6e3914)
 -> Invoking rule parse_prolog_term/2
     Continuation: com.svincent.moksa.Continuation@27734f
     Rule Def: parse_prolog_term([end_of_file | Rest], end_of_file)
     2 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == Retval
         continuation == NONE
Saved continuation for choicepoint: NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/2
     Continuation: com.svincent.moksa.Continuation@65855a
     Rule Def: ':-'(parse_prolog_term(Tokens, Term), parse_prolog_term(Tokens, 1201, Term, [end]))
     2 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == Retval
         continuation == NONE
Returning continuation for rule parse_prolog_term/2 (com.svincent.moksa.Continuation@65855a)
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@15fd19
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','('='(Tokens, [integer(Number) | Rest]), ','('>='(Priority, 0), is(Term, Number))))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
Saved continuation for choicepoint: NONE
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@15fd19)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@113fe2
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == [integer(Number), end]
         continuation == Continuation(rule == >=/2, args == [Priority, 0], next == Continuation(rule == is/2, args == [Term, Number], next == NONE)@7934ad)@714ceb
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@70eed6
     Rule Def: ':-'(parse_prolog_term([float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, Number)))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@505c81
     Rule Def: ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@691f36
     Rule Def: ':-'(parse_prolog_term([name(-), float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@20cc
     Rule Def: ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@694e92
     Rule Def: ':-'(parse_prolog_term([name(Name), open | Rest], Priority, Term, Tail), ','('>='(Priority, 0), ','(parse_prolog_arg_list(Rest, Priority, Args, Tail), '=..'(Term, [Name | Args]))))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@2558d6
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','(operator(Name), ','('>='(Priority, 1201), '='(Term, Name))))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@6b7859
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Name)))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@2a54f9
     Rule Def: ':-'(parse_prolog_term([string(S) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, S)))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@30e280
     Rule Def: ':-'(parse_prolog_term([open_curly | BodyTokens], Priority, Term, Rest), ','('>='(Priority, 0), ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm]))))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@6672d6
     Rule Def: ':-'(parse_prolog_term([open | Rest], Priority, Term, Tail), parse_prolog_term(Rest, 1201, Term, [close | Tail]))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@7d54d6
     Rule Def: ':-'(parse_prolog_term([name(Op) | ATokens], Priority, Term, Rest), ','(current_op(OPri, Op_Specifier, Op), ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))))))
     4 Registers follow:
         register[0] == [name(:-), name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@7d54d6)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4cb029
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == :-
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40)@6893df
Saved continuation for choicepoint: Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40)@6893df
Returning continuation for rule current_op/3 (com.svincent.moksa.Continuation@4cb029)
 -> Invoking rule calculate_prolog_prefix_subpriority/3
     Continuation: com.svincent.moksa.Continuation@6893df
     Rule Def: ':-'(calculate_prolog_prefix_subpriority(fx, P, AP), is(AP, '-'(P, 1)))
     3 Registers follow:
         register[0] == xfx
         register[1] == 1200
         register[2] == APri
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule calculate_prolog_prefix_subpriority/3
     Continuation: com.svincent.moksa.Continuation@443226
     Rule Def: ':-'(calculate_prolog_prefix_subpriority(fy, P, AP), is(AP, P))
     3 Registers follow:
         register[0] == xfx
         register[1] == 1200
         register[2] == APri
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@386000
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == :-
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40)@6893df
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@26d4f1
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == :-
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40)@6893df
Returning continuation for rule current_op/3 (com.svincent.moksa.Continuation@26d4f1)
 -> Invoking rule calculate_prolog_prefix_subpriority/3
     Continuation: com.svincent.moksa.Continuation@6893df
     Rule Def: ':-'(calculate_prolog_prefix_subpriority(fx, P, AP), is(AP, '-'(P, 1)))
     3 Registers follow:
         register[0] == fx
         register[1] == 1200
         register[2] == APri
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40
Returning continuation for rule calculate_prolog_prefix_subpriority/3 (com.svincent.moksa.Continuation@6893df)
 -> Invoking rule is/2
     Continuation: com.svincent.moksa.Continuation@662dc8
     Rule Def: builtin(is/2)
     2 Registers follow:
         register[0] == APri
         register[1] == '-'(1200, 1)
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2)@21cc40
Returning continuation for rule is/2 (com.svincent.moksa.Continuation@662dc8)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@21cc40
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 1201
         register[1] == 1200
         continuation == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@7bd9f2
Returning continuation for rule >=/2 (com.svincent.moksa.Continuation@21cc40)
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@7bd9f2
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','('='(Tokens, [integer(Number) | Rest]), ','('>='(Priority, 0), is(Term, Number))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
Saved continuation for choicepoint: Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@7bd9f2)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@47c5fc
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == [integer(Number), end]
         continuation == Continuation(rule == >=/2, args == [Priority, 0], next == Continuation(rule == is/2, args == [Term, Number], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@174b07)@3eca90
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@64dc11
     Rule Def: ':-'(parse_prolog_term([float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, Number)))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@2c1fe4
     Rule Def: ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@61d36b
     Rule Def: ':-'(parse_prolog_term([name(-), float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@7f1ba3
     Rule Def: ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@6f8cf3
     Rule Def: ':-'(parse_prolog_term([name(Name), open | Rest], Priority, Term, Tail), ','('>='(Priority, 0), ','(parse_prolog_arg_list(Rest, Priority, Args, Tail), '=..'(Term, [Name | Args]))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@6f8cf3)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@ecd7e
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 1199
         register[1] == 0
         continuation == Continuation(rule == parse_prolog_arg_list/4, args == [Rest, Priority, Args, Tail], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@5a3d6b
Returning continuation for rule >=/2 (com.svincent.moksa.Continuation@ecd7e)
 -> Invoking rule parse_prolog_arg_list/4
     Continuation: com.svincent.moksa.Continuation@5a3d6b
     Rule Def: ':-'(parse_prolog_arg_list(Tokens, Priority, ArgList, Tail), ','(parse_prolog_exp(Tokens, Priority, Exp, MoreArgTokens), ','(parse_prolog_more_args(MoreArgTokens, Priority, MoreArgs, Tail), '='(ArgList, [Exp | MoreArgs]))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == Args
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4
Returning continuation for rule parse_prolog_arg_list/4 (com.svincent.moksa.Continuation@5a3d6b)
 -> Invoking rule parse_prolog_exp/4
     Continuation: com.svincent.moksa.Continuation@764be1
     Rule Def: ':-'(parse_prolog_exp([name(Name) | Rest], Priority, Exp, Rest), ','(operator_no_comma(Name), '='(Exp, Name)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == Exp
         register[3] == MoreArgTokens
         continuation == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d
Saved continuation for choicepoint: Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d
Returning continuation for rule parse_prolog_exp/4 (com.svincent.moksa.Continuation@764be1)
 -> Invoking rule operator_no_comma/1
     Continuation: com.svincent.moksa.Continuation@3753f8
     Rule Def: ':-'(operator_no_comma(,), ','(!, fail))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule operator_no_comma/1
     Continuation: com.svincent.moksa.Continuation@2c84d9
     Rule Def: ':-'(operator_no_comma(PossibleOp), operator(PossibleOp))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
Returning continuation for rule operator_no_comma/1 (com.svincent.moksa.Continuation@2c84d9)
 -> Invoking rule operator/1
     Continuation: com.svincent.moksa.Continuation@45c3ac
     Rule Def: ':-'(operator(Operator), current_op(_, _, Operator))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
Returning continuation for rule operator/1 (com.svincent.moksa.Continuation@45c3ac)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@316e52
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@41ea29
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7436f5
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4413ee
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@786e64
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@17a37c
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6e3d60
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7fa65e
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@385e3
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4b25f1
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2808b3
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@535b58
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@122804
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@15859
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4f40f5
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@31c260
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@503429
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@108ca1
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@ab23
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@63b895
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6b7920
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5d46f7
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5e3974
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@df503
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@50d89c
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3d0dd4
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@570d7a
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@35f53a
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@76f0bf
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@37c60d
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2b853b
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@382368
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1c8a71
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@453dce
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5cda3f
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7c9944
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@326af3
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@b819f
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6b017e
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2effdf
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@69cb75
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_exp/4
     Continuation: com.svincent.moksa.Continuation@20a47e
     Rule Def: ':-'(parse_prolog_exp(Tokens, Priority, Exp, Rest), ','(parse_prolog_term(Tokens, 999, Term, Rest), '='(Exp, Term)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == Exp
         register[3] == MoreArgTokens
         continuation == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d
Returning continuation for rule parse_prolog_exp/4 (com.svincent.moksa.Continuation@20a47e)
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@f73c1
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','('='(Tokens, [integer(Number) | Rest]), ','('>='(Priority, 0), is(Term, Number))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@f73c1)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@93efe
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == [integer(Number) | MoreArgTokens]
         continuation == Continuation(rule == >=/2, args == [Priority, 0], next == Continuation(rule == is/2, args == [Term, Number], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@6c6b2)@5ee671
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@6b13c7
     Rule Def: ':-'(parse_prolog_term([float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, Number)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@5f8f5e
     Rule Def: ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@3d93f4
     Rule Def: ':-'(parse_prolog_term([name(-), float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@3ca5f1
     Rule Def: ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@329f3d
     Rule Def: ':-'(parse_prolog_term([name(Name), open | Rest], Priority, Term, Tail), ','('>='(Priority, 0), ','(parse_prolog_arg_list(Rest, Priority, Args, Tail), '=..'(Term, [Name | Args]))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@749757
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','(operator(Name), ','('>='(Priority, 1201), '='(Term, Name))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@749757)
 -> Invoking rule operator/1
     Continuation: com.svincent.moksa.Continuation@7bd6a1
     Rule Def: ':-'(operator(Operator), current_op(_, _, Operator))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
Returning continuation for rule operator/1 (com.svincent.moksa.Continuation@7bd6a1)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7cf0ce
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@256ea2
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2701e
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@ee9d6
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1a0c7c
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@29ae05
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5ff3a2
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@742b49
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@45e044
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6c347
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7e6a96
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7a5cc
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@160f05
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@342cbf
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@65b723
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5a8767
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6f7ce9
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@71bbc9
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5fafd1
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@fce95
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@43c8b3
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2d7a10
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@28c488
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7eca64
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@198b08
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@76cbf7
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@48cc8c
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6d084b
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3bb2b8
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@52544e
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1cdeff
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7471e0
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@604cbf
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4ec0c5
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@52068d
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2c2f9c
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@69ca65
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@66e815
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@ece65
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@106082
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@47ee05)@5b9e68
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@301ed8
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Name)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@301ed8)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@3901c6
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 999
         register[1] == 0
         continuation == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144)@237368
Returning continuation for rule >=/2 (com.svincent.moksa.Continuation@3901c6)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@237368
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == Term
         register[1] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d)@789144
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@237368)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@789144
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == Exp
         register[1] == Hello, world!
         continuation == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7)@6f9f1d
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@789144)
 -> Invoking rule parse_prolog_more_args/4
     Continuation: com.svincent.moksa.Continuation@6f9f1d
     Rule Def: parse_prolog_more_args([close | Rest], Priority, [], Rest)
     4 Registers follow:
         register[0] == [close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == MoreArgs
         register[3] == [end]
         continuation == Continuation(rule == =/2, args == [ArgList, [Hello, world! | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7
Saved continuation for choicepoint: Continuation(rule == =/2, args == [ArgList, [Hello, world! | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_more_args/4
     Continuation: com.svincent.moksa.Continuation@6dc3a2
     Rule Def: ':-'(parse_prolog_more_args([name(,) | Rest], Priority, ArgList, Tail), ','(parse_prolog_exp(Rest, Priority, Exp, MoreArgTokens), ','(parse_prolog_more_args(MoreArgTokens, Priority, MoreArgs, Tail), '='(ArgList, [Exp | MoreArgs]))))
     4 Registers follow:
         register[0] == [close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == MoreArgs
         register[3] == [end]
         continuation == Continuation(rule == =/2, args == [ArgList, [Hello, world! | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@5520c4)@6fd0b7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@46f579
     Rule Def: ':-'(parse_prolog_term([string(S) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, S)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@1ddcde
     Rule Def: ':-'(parse_prolog_term([open_curly | BodyTokens], Priority, Term, Rest), ','('>='(Priority, 0), ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm]))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@fb1f7
     Rule Def: ':-'(parse_prolog_term([open | Rest], Priority, Term, Tail), parse_prolog_term(Rest, 1201, Term, [close | Tail]))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@6d0338
     Rule Def: ':-'(parse_prolog_term([name(Op) | ATokens], Priority, Term, Rest), ','(current_op(OPri, Op_Specifier, Op), ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@6d0338)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6e70c7
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
Saved continuation for choicepoint: Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@f4fb3
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3988a6
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3a6c83
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a1e44
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@29428e
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@50a5d9
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@388993
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@504653
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@38f82d
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2d77a7
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@aaa1e
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@26aeed
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@26804e
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@31b4c3
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@52906a
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@72ffb
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5f38fd
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@16a786
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@507fb2
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6fb836
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@26e85f
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@61f10f
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@193779
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@916a2
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2ce908
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@77158a
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@27391d
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@16ab4e
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@48aa23
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@19f91c
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@31aa65
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@29f3b5
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3f3045
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7a29a1
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@434234
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2f8358
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@580be3
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@74689e
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6d75
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@2e506e)@228a02)@12b996)@563e39
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@125127
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(,) | BTokens], Tokens), ','('='(Op, ,), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))))))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@125127)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@dfef8
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(,) | BTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@1121f6
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(,) | BTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@1121f6)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@4cce3c
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@77f540
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@77f540)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@655dd
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f)@3c1b02
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@655dd)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@3c1b02
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == Op
         register[1] == ,
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0)@5b4f6f
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@3c1b02)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5b4f6f
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6f5502
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@361fd1
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@62dae9
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1209ea
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@48f6f8
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4e2dd4
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
Returning continuation for rule current_op/3 (com.svincent.moksa.Continuation@4e2dd4)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@34bed0
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 999
         register[1] == 1000
         continuation == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@22cdb6
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6f9157
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2f0999
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1f2ee1
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3ecfff
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@499159
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@65a77f
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@57ad1c
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@261164
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3fc8e0
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1d0a4f
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@fd984
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@11a775
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@91cee
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4a63d8
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@60ff2f
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1173ef
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@52513a
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@52c4d9
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@799ff5
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@74c3aa
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@59fd51
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@60d49
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5251a3
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6dc073
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@75d386
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@121f1d
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@38e059
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@110040
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2786c3
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@88c0
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@122221
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7ec107
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@5e83f9)@2a5330)@3b7465)@56c16c)@34bed0
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@32e13d
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [name(,), name(nl), end]
         continuation == Continuation(rule == =/2***DEAD***)@3c1b02
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@32e13d)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@617189
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [name(nl), end]
         continuation == Continuation(rule == =/2***DEAD***)@3c1b02
Saved continuation for choicepoint: Continuation(rule == =/2***DEAD***)@3c1b02
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@64f6cd
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [name(nl), end]
         continuation == Continuation(rule == =/2***DEAD***)@3c1b02
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@64f6cd)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@72380
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [end]
         continuation == Continuation(rule == =/2***DEAD***)@3c1b02
Saved continuation for choicepoint: Continuation(rule == =/2***DEAD***)@3c1b02
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@2bb514
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [end]
         continuation == Continuation(rule == =/2***DEAD***)@3c1b02
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@2bb514)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@7d5d2a
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == []
         continuation == Continuation(rule == =/2***DEAD***)@3c1b02
Saved continuation for choicepoint: Continuation(rule == =/2***DEAD***)@3c1b02
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@6fa474
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == []
         continuation == Continuation(rule == =/2***DEAD***)@3c1b02
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@15c083
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(Op) | BTokens], Tokens), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))))))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@15c083)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@11d8c1
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op) | BTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@11d8c1)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39240e
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6e4648
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@482923
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4ec44
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3383e9
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@19681b
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1edf4
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2d3205
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2f1921
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1adc30
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6df84b
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4832d2
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@8199
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3c887b
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@246701
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@66a22b
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@20cc56
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@47393f
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7f7a1e
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a57fb
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@763f5d
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3a317a
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6768e
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@519bc8
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4a8cd1
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@630ab9
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@551f60
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7ee8b8
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@60b6f5
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@bc49d
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@195d80
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@49b9ca
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@44aad3
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2b28fe
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@105738
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4e5b1c
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3fc93a
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@341960
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6e293a
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@54a328
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@23d4cf
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op) | BTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@23d4cf)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@68a1f6
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@6152c5
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@6152c5)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@1319c
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@1319c)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39240e
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6025e7
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@587c94
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5b0afd
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2e7820
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@508633
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1a9334
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
Returning continuation for rule current_op/3 (com.svincent.moksa.Continuation@1a9334)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@20be79
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 999
         register[1] == 1000
         continuation == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@364435
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@37fb1e
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@479feb
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@543c88
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5212bc
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4c1103
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@711404
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@592174
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2352a5
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6fe26
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@17a560
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6a5671
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@515445
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@73aa07
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1fc2fb
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39eeda
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@704baa
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@77a7f9
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@34fad5
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3fea1d
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@233d48
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@c68c3
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@32002f
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a4983
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@406199
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@47b00c
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@76f296
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@309468
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5f5a8f
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@32a2d8
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@613d52
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@fa6f
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39ce4b
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@16c1b0
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@16c1b0)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@61f24
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@61f24)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39240e
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@66aa18
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@292d26
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5329c5
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5b699b
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@726605
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7ebe1
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@f11b8
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@544ec1
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7e748f
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@168e23
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4da8f4
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@f6235
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@78a212
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@585f79
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@641e9a
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@15273a
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4282a1
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@e3293
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1a64ed
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@580e6d
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1b5393
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@bdcd2
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4e79f1
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@27e353
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3d928a
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5fc547
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@10f6d3
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3cc0bc
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@11a3a4
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@e790c
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2d263f
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a0f6c
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5a9de6
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@34a7d8
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@778ef1
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@49a690
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@56776d
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3ad085
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4fce71
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [nl, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@7a8a02
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@7a8a02)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@7aba46
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@5b7df8
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == [end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@5b7df8)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@2b3d53
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@474f37
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | BTokens]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =/2***DEAD***)@789144)@2d9c06)@5e5a50)@7b6889)@c2ff5)@20be79)@39240e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@21b220
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(Op) | Rest], Tokens), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_postfix_subpriority(Op_Specifier, OPri, APri), ','(parse_prolog_term(ATokens, APri, A, []), '=..'(Term, [Op, A])))))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@21b220)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@3570b0
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@3570b0)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7ce4e7
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@182589
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@488440
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@62937c
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@40e45a
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4fec48
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@217083
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@61d5ea
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@231e1b
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@da5eb
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@81d2e
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@33f829
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@698403
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5a0305
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7c4c51
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@765a16
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@148bd3
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@680842
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7653ae
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6fe0f4
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@19d0a1
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@502b51
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4bf30e
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4247a0
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6c6696
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@431340
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@24e2e3
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2bb7e0
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@34f69a
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a15cd
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7d68b1
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@645076
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5e9756
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@21ab80
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@27284
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2c7568
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5009b4
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2d15a9
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@691f5d
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@a3b24
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Hello, world!, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@30ce8f
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@30ce8f)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@492535
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@29c09e
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@29c09e)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@24e743
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@24e743)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7ce4e7
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4aeb52
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1f671b
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a3793
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@26d51e
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@71bb78
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4b035d
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
Returning continuation for rule current_op/3 (com.svincent.moksa.Continuation@4b035d)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@9cf1e
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 999
         register[1] == 1000
         continuation == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4a0115
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@d1fa5
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@18a455
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4cee32
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a37a6
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2b7eea
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@19353f
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@76e369
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4c194d
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@112783
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@394894
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4bfe9d
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@38f864
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3b7759
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@189f84
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@10c424
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3d2664
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@238bd2
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@30bad7
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3a9340
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@198891
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@551d7f
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@382a9
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7725c4
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@506dc4
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5663a2
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2761fe
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@126b07
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@30d082
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4931fc
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@70c0d3
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3820e
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4f80d6
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [,, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@13722c
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [name(,), name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@13722c)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@2cc95d
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@2cc95d)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7ce4e7
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@57fb52
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@34e4fb
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@252fdf
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6a0252
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3e89c3
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4695a6
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@acf6e
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@386918
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7bb290
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@849bc
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@20d62b
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4cc588
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3c82e7
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@362012
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@73a34b
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@659128
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1ced8e
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@302efa
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5c57db
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@c24c0
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@40c281
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@21d1f4
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5f280b
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3e0f0a
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4d5f8b
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3bd574
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3adc56
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@57aa53
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6f50a8
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@187814
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@73a7ab
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4faf8
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@78c6df
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@486be5
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@23b25c
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@12bbba
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@62dbb6
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@46c1d4
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5f8172
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [nl, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@2ba11b
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [name(nl), end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@2ba11b)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@5e179a
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@5fadcf
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == [end]
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@5fadcf)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@c1dd9
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@7bb7cb
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(Op) | MoreArgTokens]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == Continuation(rule == =/2***DEAD***)@789144)@79717e)@a2d64)@2a3722)@9cf1e)@7ce4e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@5f8b99
     Rule Def: ':-'(parse_prolog_term([open_list | ListTokens], Priority, Term, Rest), ','('>='(Priority, 0), ','(parse_prolog_term_list(ListTokens, Priority, List, Rest), '='(Term, List))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2***DEAD***)@789144
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@462851
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','(operator(Name), ','('>='(Priority, 1201), '='(Term, Name))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@10058
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Name)))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@3dab91
     Rule Def: ':-'(parse_prolog_term([string(S) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, S)))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@4ac00c
     Rule Def: ':-'(parse_prolog_term([open_curly | BodyTokens], Priority, Term, Rest), ','('>='(Priority, 0), ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm]))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@65b28
     Rule Def: ':-'(parse_prolog_term([open | Rest], Priority, Term, Tail), parse_prolog_term(Rest, 1201, Term, [close | Tail]))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@4ac6db
     Rule Def: ':-'(parse_prolog_term([name(Op) | ATokens], Priority, Term, Rest), ','(current_op(OPri, Op_Specifier, Op), ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@4ac6db)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@456c60
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
Saved continuation for choicepoint: Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5ac3c9
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6bd75b
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7c268
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6c4a87
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@10fe28
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1e29fb
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@564c37
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@25d2b2
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2be1bd
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@717e77
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@25f739
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@9fd93
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@66ff0d
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@72e449
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@697f9f
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39b538
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@288051
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@45eb
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6e7a14
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@10cb03
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6cb8
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@61a408
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@581784
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@701a1e
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@42a80d
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@26f75b
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39b78e
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@41d05d
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@56a05e
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3a8602
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@33f8f6
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1df6f1
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3f7190
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@38bef7
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@16632
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5c6a77
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@51e89e
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7f057f
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@41f10e
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == write
         continuation == Continuation(rule == calculate_prolog_prefix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, Rest], next == Continuation(rule == =../2, args == [Term, [write, A]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@4e280c)@275d39)@595f51)@d1ff
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@38deef
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(,) | BTokens], Tokens), ','('='(Op, ,), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))))))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         register[1] == 1199
         register[2] == A
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@38deef)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@342ba4
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(,) | BTokens]
         register[2] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@3000e7
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(,) | BTokens]
         register[2] == [name(write), open, name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@3000e7)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@b76fa
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [open, name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@301d43
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [open, name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@301d43)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@513cf0
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@77b3cd
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [name(Hello, world!), close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@77b3cd)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@3d7848
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@23e5d1
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [close, name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@23e5d1)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@44fe76
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == L1
         register[1] == [name(,) | BTokens]
         register[2] == [name(,), name(nl), end]
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561)@e32e7
Returning continuation for rule append/3 (com.svincent.moksa.Continuation@44fe76)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@e32e7
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == Op
         register[1] == ,
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e)@299561
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@e32e7)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@299561
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1e1e67
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5e176f
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@549f94
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@38c8e6
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@d9850
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@ab323
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == OPri
         register[1] == Op_Specifier
         register[2] == ,
         continuation == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf)@29ab3e
Returning continuation for rule current_op/3 (com.svincent.moksa.Continuation@ab323)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@29ab3e
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 1199
         register[1] == 1000
         continuation == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@4a6cbf
Returning continuation for rule >=/2 (com.svincent.moksa.Continuation@29ab3e)
 -> Invoking rule calculate_prolog_infix_subpriority/4
     Continuation: com.svincent.moksa.Continuation@4a6cbf
     Rule Def: ':-'(calculate_prolog_infix_subpriority(xfx, P, AP, BP), ','(is(AP, '-'(P, 1)), is(BP, '-'(P, 1))))
     4 Registers follow:
         register[0] == xfy
         register[1] == 1000
         register[2] == APri
         register[3] == BPri
         continuation == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule calculate_prolog_infix_subpriority/4
     Continuation: com.svincent.moksa.Continuation@76e552
     Rule Def: ':-'(calculate_prolog_infix_subpriority(yfx, P, AP, BP), ','(is(AP, P), is(BP, '-'(P, 1))))
     4 Registers follow:
         register[0] == xfy
         register[1] == 1000
         register[2] == APri
         register[3] == BPri
         continuation == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule calculate_prolog_infix_subpriority/4
     Continuation: com.svincent.moksa.Continuation@4980c9
     Rule Def: ':-'(calculate_prolog_infix_subpriority(xfy, P, AP, BP), ','(is(AP, '-'(P, 1)), is(BP, P)))
     4 Registers follow:
         register[0] == xfy
         register[1] == 1000
         register[2] == APri
         register[3] == BPri
         continuation == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60
Returning continuation for rule calculate_prolog_infix_subpriority/4 (com.svincent.moksa.Continuation@4980c9)
 -> Invoking rule is/2
     Continuation: com.svincent.moksa.Continuation@2611a7
     Rule Def: builtin(is/2)
     2 Registers follow:
         register[0] == APri
         register[1] == '-'(1000, 1)
         continuation == Continuation(rule == is/2, args == [BP, P], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60)@51052d
Returning continuation for rule is/2 (com.svincent.moksa.Continuation@2611a7)
 -> Invoking rule is/2
     Continuation: com.svincent.moksa.Continuation@51052d
     Rule Def: builtin(is/2)
     2 Registers follow:
         register[0] == BPri
         register[1] == 1000
         continuation == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@6f2c60
Returning continuation for rule is/2 (com.svincent.moksa.Continuation@51052d)
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@6f2c60
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','('='(Tokens, [integer(Number) | Rest]), ','('>='(Priority, 0), is(Term, Number))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close]
         register[1] == 999
         register[2] == A
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@6f2c60)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@2ad19e
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close]
         register[1] == [integer(Number)]
         continuation == Continuation(rule == >=/2, args == [Priority, 0], next == Continuation(rule == is/2, args == [Term, Number], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@281d4b)@1b5217
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@2a6f16
     Rule Def: ':-'(parse_prolog_term([float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, Number)))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close]
         register[1] == 999
         register[2] == A
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@63118a
     Rule Def: ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close]
         register[1] == 999
         register[2] == A
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@14884d
     Rule Def: ':-'(parse_prolog_term([name(-), float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close]
         register[1] == 999
         register[2] == A
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@7ca8
     Rule Def: ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close]
         register[1] == 999
         register[2] == A
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@7808b9
     Rule Def: ':-'(parse_prolog_term([name(Name), open | Rest], Priority, Term, Tail), ','('>='(Priority, 0), ','(parse_prolog_arg_list(Rest, Priority, Args, Tail), '=..'(Term, [Name | Args]))))
     4 Registers follow:
         register[0] == [name(write), open, name(Hello, world!), close]
         register[1] == 999
         register[2] == A
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@7808b9)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@4da23
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 999
         register[1] == 0
         continuation == Continuation(rule == parse_prolog_arg_list/4, args == [Rest, Priority, Args, Tail], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@3c468a
Returning continuation for rule >=/2 (com.svincent.moksa.Continuation@4da23)
 -> Invoking rule parse_prolog_arg_list/4
     Continuation: com.svincent.moksa.Continuation@3c468a
     Rule Def: ':-'(parse_prolog_arg_list(Tokens, Priority, ArgList, Tail), ','(parse_prolog_exp(Tokens, Priority, Exp, MoreArgTokens), ','(parse_prolog_more_args(MoreArgTokens, Priority, MoreArgs, Tail), '='(ArgList, [Exp | MoreArgs]))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Args
         register[3] == []
         continuation == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f
Returning continuation for rule parse_prolog_arg_list/4 (com.svincent.moksa.Continuation@3c468a)
 -> Invoking rule parse_prolog_exp/4
     Continuation: com.svincent.moksa.Continuation@3b1d04
     Rule Def: ':-'(parse_prolog_exp([name(Name) | Rest], Priority, Exp, Rest), ','(operator_no_comma(Name), '='(Exp, Name)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Exp
         register[3] == MoreArgTokens
         continuation == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89
Saved continuation for choicepoint: Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89
Returning continuation for rule parse_prolog_exp/4 (com.svincent.moksa.Continuation@3b1d04)
 -> Invoking rule operator_no_comma/1
     Continuation: com.svincent.moksa.Continuation@2cb49d
     Rule Def: ':-'(operator_no_comma(,), ','(!, fail))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule operator_no_comma/1
     Continuation: com.svincent.moksa.Continuation@4b6009
     Rule Def: ':-'(operator_no_comma(PossibleOp), operator(PossibleOp))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
Returning continuation for rule operator_no_comma/1 (com.svincent.moksa.Continuation@4b6009)
 -> Invoking rule operator/1
     Continuation: com.svincent.moksa.Continuation@e28b9
     Rule Def: ':-'(operator(Operator), current_op(_, _, Operator))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
Returning continuation for rule operator/1 (com.svincent.moksa.Continuation@e28b9)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@13a66f
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@13d6bc
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@76df4c
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3e0e27
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@13385d
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5973ea
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@49131c
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5b99f
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5da25b
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4e2187
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7b56b1
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@78968f
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@64c34e
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5253d5
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7ddc31
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@35282
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1df354
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5225a7
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@262c31
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1f5011
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@41b571
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6f137d
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@687719
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@632802
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@57c2bd
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@323210
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@74f44a
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5256fa
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4c4975
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6ac461
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2da3d
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@45f743
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6c8909
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@18c56d
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@497934
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@348197
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@280a69
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4384c2
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@40ec97
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6cb281
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Name], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@5d88a
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_exp/4
     Continuation: com.svincent.moksa.Continuation@3b60c3
     Rule Def: ':-'(parse_prolog_exp(Tokens, Priority, Exp, Rest), ','(parse_prolog_term(Tokens, 999, Term, Rest), '='(Exp, Term)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Exp
         register[3] == MoreArgTokens
         continuation == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89
Returning continuation for rule parse_prolog_exp/4 (com.svincent.moksa.Continuation@3b60c3)
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@4db06e
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','('='(Tokens, [integer(Number) | Rest]), ','('>='(Priority, 0), is(Term, Number))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@4db06e)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@315d34
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == [integer(Number) | MoreArgTokens]
         continuation == Continuation(rule == >=/2, args == [Priority, 0], next == Continuation(rule == is/2, args == [Term, Number], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@5e256f)@6bd8ea
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@6e1fb1
     Rule Def: ':-'(parse_prolog_term([float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, Number)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@62cb55
     Rule Def: ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@1360e2
     Rule Def: ':-'(parse_prolog_term([name(-), float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@3db503
     Rule Def: ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@36e39f
     Rule Def: ':-'(parse_prolog_term([name(Name), open | Rest], Priority, Term, Tail), ','('>='(Priority, 0), ','(parse_prolog_arg_list(Rest, Priority, Args, Tail), '=..'(Term, [Name | Args]))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@19dc16
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','(operator(Name), ','('>='(Priority, 1201), '='(Term, Name))))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@19dc16)
 -> Invoking rule operator/1
     Continuation: com.svincent.moksa.Continuation@405d3b
     Rule Def: ':-'(operator(Operator), current_op(_, _, Operator))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
Returning continuation for rule operator/1 (com.svincent.moksa.Continuation@405d3b)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@66afb3
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1945ce
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@35dac4
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2d96f2
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@110003
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@17e4ca
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2db1d4
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@75d6ab
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@60a26f
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@484a05
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@739b3a
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@542a75
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2f993e
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@75e4fc
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@c62c8
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2940b3
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@56b6b9
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@766cff
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6de49c
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3bf1ca
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7f0dde
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@678fc6
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@101437
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1f6226
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@64ea66
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@58f9d3
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@79a2e7
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@360280
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5e55ab
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4a55f2
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5093f1
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@20bf2c
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@66f7d2
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1836ed
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3e0ebb
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@39443f
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2fae45
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5a4b71
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@f1d7e
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@59660d
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == Hello, world!
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@28f6ee)@6bade9
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@3b0d0d
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Name)))
     4 Registers follow:
         register[0] == [name(Hello, world!), close]
         register[1] == 999
         register[2] == Term
         register[3] == MoreArgTokens
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@3b0d0d)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@55e55f
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 999
         register[1] == 0
         continuation == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6)@45c859
Returning continuation for rule >=/2 (com.svincent.moksa.Continuation@55e55f)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@45c859
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == Term
         register[1] == Hello, world!
         continuation == Continuation(rule == =/2, args == [Exp, Term], next == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89)@7a1bb6
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@45c859)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@7a1bb6
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == Exp
         register[1] == Hello, world!
         continuation == Continuation(rule == parse_prolog_more_args/4, args == [MoreArgTokens, Priority, MoreArgs, Tail], next == Continuation(rule == =/2, args == [ArgList, [Exp | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7)@39ab89
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@7a1bb6)
 -> Invoking rule parse_prolog_more_args/4
     Continuation: com.svincent.moksa.Continuation@39ab89
     Rule Def: parse_prolog_more_args([close | Rest], Priority, [], Rest)
     4 Registers follow:
         register[0] == [close]
         register[1] == 999
         register[2] == MoreArgs
         register[3] == []
         continuation == Continuation(rule == =/2, args == [ArgList, [Hello, world! | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7
Saved continuation for choicepoint: Continuation(rule == =/2, args == [ArgList, [Hello, world! | MoreArgs]], next == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f)@6e22f7
Returning continuation for rule parse_prolog_more_args/4 (com.svincent.moksa.Continuation@39ab89)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@6e22f7
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == Args
         register[1] == [Hello, world!]
         continuation == Continuation(rule == =../2, args == [Term, [write | Args]], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2)@d3d6f
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@6e22f7)
 -> Invoking rule =../2
     Continuation: com.svincent.moksa.Continuation@d3d6f
     Rule Def: builtin(=../2)
     2 Registers follow:
         register[0] == A
         register[1] == [write, Hello, world!]
         continuation == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [,, A, B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@a6ae2
Returning continuation for rule =../2 (com.svincent.moksa.Continuation@d3d6f)
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@a6ae2
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','('='(Tokens, [integer(Number) | Rest]), ','('>='(Priority, 0), is(Term, Number))))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
Saved continuation for choicepoint: Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@a6ae2)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@64883c
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == [name(nl), end]
         register[1] == [integer(Number), end]
         continuation == Continuation(rule == >=/2, args == [Priority, 0], next == Continuation(rule == is/2, args == [Term, Number], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@2c1e6b)@11c88
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@785d65
     Rule Def: ':-'(parse_prolog_term([float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, Number)))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@3bc257
     Rule Def: ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@53f67e
     Rule Def: ':-'(parse_prolog_term([name(-), float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@5bdc50
     Rule Def: ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@5d3812
     Rule Def: ':-'(parse_prolog_term([name(Name), open | Rest], Priority, Term, Tail), ','('>='(Priority, 0), ','(parse_prolog_arg_list(Rest, Priority, Args, Tail), '=..'(Term, [Name | Args]))))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@c436b
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','(operator(Name), ','('>='(Priority, 1201), '='(Term, Name))))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@c436b)
 -> Invoking rule operator/1
     Continuation: com.svincent.moksa.Continuation@1e5c73
     Rule Def: ':-'(operator(Operator), current_op(_, _, Operator))
     1 Registers follow:
         register[0] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
Returning continuation for rule operator/1 (com.svincent.moksa.Continuation@1e5c73)
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@315692
     Rule Def: current_op(1200, xfx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
Saved continuation for choicepoint: Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2a9f99
     Rule Def: current_op(1200, xfx, -->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@542d08
     Rule Def: current_op(1200, fx, :-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@586fd3
     Rule Def: current_op(1200, fx, ?-)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@158bb8
     Rule Def: current_op(1100, xfy, ;)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@7f4ec
     Rule Def: current_op(1050, xfy, ->)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@60e128
     Rule Def: current_op(1000, xfy, ,)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5e1077
     Rule Def: current_op(700, xfx, =)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@b3364
     Rule Def: current_op(700, xfx, \=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5b05b2
     Rule Def: current_op(700, xfx, ==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@530cf2
     Rule Def: current_op(700, xfx, \==)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@76fba0
     Rule Def: current_op(700, xfx, @<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1ed9e
     Rule Def: current_op(700, xfx, @=<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@175422
     Rule Def: current_op(700, xfx, @>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@149f69
     Rule Def: current_op(700, xfx, @>=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@6dadf9
     Rule Def: current_op(700, xfx, =..)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@38d6f7
     Rule Def: current_op(700, xfx, is)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@290fbc
     Rule Def: current_op(700, xfx, =:=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@480b01
     Rule Def: current_op(700, xfx, =\=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@4aa0ce
     Rule Def: current_op(700, xfx, <)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@33eca
     Rule Def: current_op(700, xfx, =<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@f5824
     Rule Def: current_op(700, xfx, >)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@63cd51
     Rule Def: current_op(700, xfx, >=)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3c8e1e
     Rule Def: current_op(500, yfx, +)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@1671b2
     Rule Def: current_op(500, yfx, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2764b
     Rule Def: current_op(500, yfx, /\)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@2452e8
     Rule Def: current_op(500, yfx, \/)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@3f3d87
     Rule Def: current_op(400, yfx, *)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@60991f
     Rule Def: current_op(400, yfx, /)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@64f7c2
     Rule Def: current_op(400, yfx, //)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@45f0e3
     Rule Def: current_op(400, yfx, rem)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@49d92c
     Rule Def: current_op(400, yfx, mod)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@50fafc
     Rule Def: current_op(400, yfx, <<)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@dc6b5
     Rule Def: current_op(400, yfx, >>)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@70bea5
     Rule Def: current_op(200, xfx, **)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@747396
     Rule Def: current_op(200, xfy, ^)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@50af9b
     Rule Def: current_op(200, fy, -)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@38f8eb
     Rule Def: current_op(200, fy, \)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@5e17f4
     Rule Def: current_op(100, xfx, @)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule current_op/3
     Continuation: com.svincent.moksa.Continuation@76ba0f
     Rule Def: current_op(50, xfx, :)
     3 Registers follow:
         register[0] == _
         register[1] == _
         register[2] == nl
         continuation == Continuation(rule == >=/2, args == [Priority, 1201], next == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@4791b9)@3020ad
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@313906
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Name)))
     4 Registers follow:
         register[0] == [name(nl), end]
         register[1] == 1000
         register[2] == B
         register[3] == [end]
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@313906)
 -> Invoking rule >=/2
     Continuation: com.svincent.moksa.Continuation@16cf11
     Rule Def: builtin(>=/2)
     2 Registers follow:
         register[0] == 1000
         register[1] == 0
         continuation == Continuation(rule == =/2, args == [Term, Name], next == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b)@747bf5
Returning continuation for rule >=/2 (com.svincent.moksa.Continuation@16cf11)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@747bf5
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == B
         register[1] == nl
         continuation == Continuation(rule == =../2, args == [Term, [,, write(Hello, world!), B]], next == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6)@1d332b
Returning continuation for rule =/2 (com.svincent.moksa.Continuation@747bf5)
 -> Invoking rule =../2
     Continuation: com.svincent.moksa.Continuation@1d332b
     Rule Def: builtin(=../2)
     2 Registers follow:
         register[0] == A
         register[1] == [,, write(Hello, world!), nl]
         continuation == Continuation(rule == =../2, args == [Term, [:-, A]], next == NONE)@415de6
Returning continuation for rule =../2 (com.svincent.moksa.Continuation@1d332b)
 -> Invoking rule =../2
     Continuation: com.svincent.moksa.Continuation@415de6
     Rule Def: builtin(=../2)
     2 Registers follow:
         register[0] == Retval
         register[1] == [:-, ','(write(Hello, world!), nl)]
         continuation == NONE
Returning continuation for rule =../2 (com.svincent.moksa.Continuation@415de6)
Saved continuation for choicepoint: NONE
 -> Invoking rule read_term/2
     Continuation: com.svincent.moksa.Continuation@4f9fdc
     Rule Def: ':-'(read_term(Stream, Term), ','(tokenize_prolog_term(Stream, Tokens, _), parse_prolog_term(Tokens, Term)))
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == Retval
         continuation == NONE
Returning continuation for rule read_term/2 (com.svincent.moksa.Continuation@4f9fdc)
 -> Invoking rule tokenize_prolog_term/3
     Continuation: com.svincent.moksa.Continuation@825b3
     Rule Def: ':-'(tokenize_prolog_term(S, Tokens, Vars), ','(get_prolog_token(S, Next), prolog_term_to_tokens(Next, S, Tokens, [])))
     3 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == Tokens
         register[2] == _
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
Returning continuation for rule tokenize_prolog_term/3 (com.svincent.moksa.Continuation@825b3)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@695a56
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == Next
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [Next, S, Tokens, []], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847)@29e357
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@695a56)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@29e357
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == end_of_file
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@ca470
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == end_of_file
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@ca470)
 -> Invoking rule parse_prolog_term/2
     Continuation: com.svincent.moksa.Continuation@632847
     Rule Def: parse_prolog_term([end_of_file | Rest], end_of_file)
     2 Registers follow:
         register[0] == []
         register[1] == Retval
         continuation == NONE
Saved continuation for choicepoint: NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/2
     Continuation: com.svincent.moksa.Continuation@7fc686
     Rule Def: ':-'(parse_prolog_term(Tokens, Term), parse_prolog_term(Tokens, 1201, Term, [end]))
     2 Registers follow:
         register[0] == []
         register[1] == Retval
         continuation == NONE
Returning continuation for rule parse_prolog_term/2 (com.svincent.moksa.Continuation@7fc686)
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@42bece
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','('='(Tokens, [integer(Number) | Rest]), ','('>='(Priority, 0), is(Term, Number))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
Saved continuation for choicepoint: NONE
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@42bece)
 -> Invoking rule =/2
     Continuation: com.svincent.moksa.Continuation@7cfa52
     Rule Def: builtin(=/2)
     2 Registers follow:
         register[0] == []
         register[1] == [integer(Number), end]
         continuation == Continuation(rule == >=/2, args == [Priority, 0], next == Continuation(rule == is/2, args == [Term, Number], next == NONE)@161dff)@b81e3
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@7c6e42
     Rule Def: ':-'(parse_prolog_term([float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, Number)))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@2af0b3
     Rule Def: ':-'(parse_prolog_term([name(-), integer(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@2082e2
     Rule Def: ':-'(parse_prolog_term([name(-), float(Number) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), is(Term, '-'(Number))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@70c85e
     Rule Def: ':-'(parse_prolog_term([variable(Name, Var) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Var)))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@7297e7
     Rule Def: ':-'(parse_prolog_term([name(Name), open | Rest], Priority, Term, Tail), ','('>='(Priority, 0), ','(parse_prolog_arg_list(Rest, Priority, Args, Tail), '=..'(Term, [Name | Args]))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@52fc36
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','(operator(Name), ','('>='(Priority, 1201), '='(Term, Name))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@2c6a45
     Rule Def: ':-'(parse_prolog_term([name(Name) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, Name)))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@75078b
     Rule Def: ':-'(parse_prolog_term([string(S) | Rest], Priority, Term, Rest), ','('>='(Priority, 0), '='(Term, S)))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@42552c
     Rule Def: ':-'(parse_prolog_term([open_curly | BodyTokens], Priority, Term, Rest), ','('>='(Priority, 0), ','(parse_prolog_term(BodyTokens, 1201, Subterm, [close_curly | Rest]), '=..'(Term, [{}, Subterm]))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@65bbd6
     Rule Def: ':-'(parse_prolog_term([open | Rest], Priority, Term, Tail), parse_prolog_term(Rest, 1201, Term, [close | Tail]))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@ee016
     Rule Def: ':-'(parse_prolog_term([name(Op) | ATokens], Priority, Term, Rest), ','(current_op(OPri, Op_Specifier, Op), ','(calculate_prolog_prefix_subpriority(Op_Specifier, OPri, APri), ','('>='(Priority, OPri), ','(parse_prolog_term(ATokens, APri, A, Rest), '=..'(Term, [Op, A]))))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@19e15c
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(,) | BTokens], Tokens), ','('='(Op, ,), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B])))))))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@19e15c)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@1a75a2
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(,) | BTokens]
         register[2] == []
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == NONE)@210b5b)@70888e)@1563ff)@581593)@706dc3)@364e6a)@562270
Saved continuation for choicepoint: Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == NONE)@210b5b)@70888e)@1563ff)@581593)@706dc3)@364e6a)@562270
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@6f0be8
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(,) | BTokens]
         register[2] == []
         continuation == Continuation(rule == =/2, args == [Op, ,], next == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == NONE)@210b5b)@70888e)@1563ff)@581593)@706dc3)@364e6a)@562270
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@76cad3
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(Op) | BTokens], Tokens), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_infix_subpriority(Op_Specifier, OPri, APri, BPri), ','(parse_prolog_term(ATokens, APri, A, []), ','(parse_prolog_term(BTokens, BPri, B, Rest), '=..'(Term, [Op, A, B]))))))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@76cad3)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@7e1feb
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op) | BTokens]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == NONE)@61899b)@113622)@78f7db)@5856a5)@2084f8)@79ed7f
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == NONE)@61899b)@113622)@78f7db)@5856a5)@2084f8)@79ed7f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@573c7a
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op) | BTokens]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_infix_subpriority/4, args == [Op_Specifier, OPri, APri, BPri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == parse_prolog_term/4, args == [BTokens, BPri, B, Rest], next == Continuation(rule == =../2, args == [Term, [Op, A, B]], next == NONE)@61899b)@113622)@78f7db)@5856a5)@2084f8)@79ed7f
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@439a20
     Rule Def: ':-'(parse_prolog_term(Tokens, Priority, Term, Rest), ','(append(ATokens, [name(Op) | Rest], Tokens), ','(current_op(OPri, Op_Specifier, Op), ','('>='(Priority, OPri), ','(calculate_prolog_postfix_subpriority(Op_Specifier, OPri, APri), ','(parse_prolog_term(ATokens, APri, A, []), '=..'(Term, [Op, A])))))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
Returning continuation for rule parse_prolog_term/4 (com.svincent.moksa.Continuation@439a20)
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@3bd23f
     Rule Def: append([], L, L)
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op), end]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == NONE)@6845c2)@3c0007)@25fefa)@6df0f)@1e8f17
Saved continuation for choicepoint: Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == NONE)@6845c2)@3c0007)@25fefa)@6df0f)@1e8f17
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule append/3
     Continuation: com.svincent.moksa.Continuation@444b88
     Rule Def: ':-'(append([A | L1], L2, [A | L3]), append(L1, L2, L3))
     3 Registers follow:
         register[0] == ATokens
         register[1] == [name(Op), end]
         register[2] == []
         continuation == Continuation(rule == current_op/3, args == [OPri, Op_Specifier, Op], next == Continuation(rule == >=/2, args == [Priority, OPri], next == Continuation(rule == calculate_prolog_postfix_subpriority/3, args == [Op_Specifier, OPri, APri], next == Continuation(rule == parse_prolog_term/4, args == [ATokens, APri, A, []], next == Continuation(rule == =../2, args == [Term, [Op, A]], next == NONE)@6845c2)@3c0007)@25fefa)@6df0f)@1e8f17
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule parse_prolog_term/4
     Continuation: com.svincent.moksa.Continuation@3ad33d
     Rule Def: ':-'(parse_prolog_term([open_list | ListTokens], Priority, Term, Rest), ','('>='(Priority, 0), ','(parse_prolog_term_list(ListTokens, Priority, List, Rest), '='(Term, List))))
     4 Registers follow:
         register[0] == []
         register[1] == 1201
         register[2] == Retval
         register[3] == [end]
         continuation == NONE
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@2799c
     Rule Def: ':-'(prolog_term_to_tokens(variable(Name), S, Tokens, Vars), ','(make_unique_variable_token(Name, Vars, VarToken, NewVars), ','('='(Tokens, [VarToken | Rest]), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, NewVars)))))
     4 Registers follow:
         register[0] == end_of_file
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@7e121c
     Rule Def: ':-'(prolog_term_to_tokens(T, S, [T | Rest], Vars), ','(get_prolog_token(S, NextToken), prolog_term_to_tokens(NextToken, S, Rest, Vars)))
     4 Registers follow:
         register[0] == end_of_file
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Tokens
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@7e121c)
 -> Invoking rule get_prolog_token/2
     Continuation: com.svincent.moksa.Continuation@56f122
     Rule Def: builtin(get_prolog_token/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[1] == NextToken
         continuation == Continuation(rule == prolog_term_to_tokens/4, args == [NextToken, S, Rest, Vars], next == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847)@7109c4
Returning continuation for rule get_prolog_token/2 (com.svincent.moksa.Continuation@56f122)
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@7109c4
     Rule Def: prolog_term_to_tokens(end, S, [end], Vars)
     4 Registers follow:
         register[0] == end_of_file
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
Saved continuation for choicepoint: Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
 -> Invoking rule fail/0
     Continuation: com.svincent.moksa.Continuation@b66cc
     Rule Def: builtin(fail/0)
     0 Registers follow:
         continuation == NONE
 -> Invoking rule prolog_term_to_tokens/4
     Continuation: com.svincent.moksa.Continuation@385660
     Rule Def: prolog_term_to_tokens(end_of_file, S, [], Vars)
     4 Registers follow:
         register[0] == end_of_file
         register[1] == com.svincent.moksa.Io$InputStreamIdentifier@64cbc4
         register[2] == Rest
         register[3] == []
         continuation == Continuation(rule == parse_prolog_term/2, args == [Tokens, Term], next == NONE)@632847
Returning continuation for rule prolog_term_to_tokens/4 (com.svincent.moksa.Continuation@385660)
 -> Invoking rule parse_prolog_term/2
     Continuation: com.svincent.moksa.Continuation@632847
     Rule Def: parse_prolog_term([end_of_file | Rest], end_of_file)
     2 Registers follow:
         register[0] == [end_of_file]
         register[1] == Retval
         continuation == NONE
Saved continuation for choicepoint: NONE
Returning continuation for rule parse_prolog_term/2 (com.svincent.moksa.Continuation@632847)
Parsed Prolog file C:\users\svincent\moksa\samples\.\helloWorld.prolog
Got query ','(write(Hello, world!), nl)
Saved continuation for choicepoint: NONE
 -> Invoking rule write/1
     Continuation: com.svincent.moksa.Continuation@2ed5f9
     Rule Def: ':-'(write(Term), ','(current_output(S), write(S, Term)))
     1 Registers follow:
         register[0] == Hello, world!
         continuation == Continuation(rule == nl/0, args == [], next == NONE)@61dfb5
Returning continuation for rule write/1 (com.svincent.moksa.Continuation@2ed5f9)
 -> Invoking rule current_output/1
     Continuation: com.svincent.moksa.Continuation@2613f8
     Rule Def: builtin(current_output/1)
     1 Registers follow:
         register[0] == S
         continuation == Continuation(rule == write/2, args == [S, Term], next == Continuation(rule == nl/0, args == [], next == NONE)@61dfb5)@6921fd
Returning continuation for rule current_output/1 (com.svincent.moksa.Continuation@2613f8)
 -> Invoking rule write/2
     Continuation: com.svincent.moksa.Continuation@6921fd
     Rule Def: builtin(write/2)
     2 Registers follow:
         register[0] == com.svincent.moksa.Io$OutputStreamIdentifier@36a43c
         register[1] == Hello, world!
         continuation == Continuation(rule == nl/0, args == [], next == NONE)@61dfb5
Returning continuation for rule write/2 (com.svincent.moksa.Continuation@6921fd)
 -> Invoking rule nl/0
     Continuation: com.svincent.moksa.Continuation@61dfb5
     Rule Def: ':-'(nl, ','(current_output(S), nl(S)))
     0 Registers follow:
         continuation == NONE
Returning continuation for rule nl/0 (com.svincent.moksa.Continuation@61dfb5)
 -> Invoking rule current_output/1
     Continuation: com.svincent.moksa.Continuation@589e56
     Rule Def: builtin(current_output/1)
     1 Registers follow:
         register[0] == S
         continuation == Continuation(rule == nl/1, args == [S], next == NONE)@3411a
Returning continuation for rule current_output/1 (com.svincent.moksa.Continuation@589e56)
 -> Invoking rule nl/1
     Continuation: com.svincent.moksa.Continuation@3411a
     Rule Def: builtin(nl/1)
     1 Registers follow:
         register[0] == com.svincent.moksa.Io$OutputStreamIdentifier@36a43c
         continuation == NONE
Hello, world!
Returning continuation for rule nl/1 (com.svincent.moksa.Continuation@3411a)
